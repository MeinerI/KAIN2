






#include "THISDUST.H"
#include "DRAWS.H"




void depthQPTable() 
{ 

		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	

	return null;
}




void depthQBlendStart() 
{ 

		

	

	return null;
}




void depthQFogStart() 
{ 

		

	

	return null;
}




void depthQFogFar() 
{ 

		

	

	return null;
}




void depthQBackColor() 
{ 

		

	

	return null;
}




void gameTimer() 
{ 

		

	

	return null;
}




void modelFadeValue() 
{ 

		

	

	return null;
}




void lowerSplitPush() 
{ 

		

	

	return null;
}




void overlayAddress() 
{ 

		

	


		

	


		

	


		

	

	return null;
}




void forceDrawInFront() 
{ 

		

	

	return null;
}





 

		

	


		

	

void ClearBss(void)

{
  DebugMenuLine *pDVar1;
  
  pDVar1 = &debugSoundMenu;
  do {
    pDVar1->type = DEBUG_LINE_TYPE_BIT;
    pDVar1 = (DebugMenuLine *)&pDVar1->lower;
  } while (pDVar1 < (DebugMenuLine *)&DAT_800de9fc);
  return;
}





void clearloop() 
{ 

		

	


		

	

	return null;
}





 

		

	


		

	

undefined8 TimerTick(void)

{
  u_char in_v0;
  u_char in_v1;
  
  gameTimer = gameTimer + 1;
  return CONCAT44(in_v0,in_v1);
}






 

		

	


		

	

u_char CheckVolatile(u_char param_1)

{
  return param_1;
}





void DRAW_AnimatedModel_S() 
{ 

		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	

	return null;
}




void anim_loop_top() 
{ 

		

	


		

	


		

	


		

	


		

	

	return null;
}




void anim_dont_flip_backface() 
{ 

		

	


		

	

	return null;
}




void sort_max_z2() 
{ 

		

	


		

	

	return null;
}




void mm2L1() 
{ 

		

	

	return null;
}




void mm2L2() 
{ 

		

	


		

	

	return null;
}




void sort_avz_continue2() 
{ 

		

	

	return null;
}




void anim_no_pushsort() 
{ 

		

	

	return null;
}




void not_colored_fog() 
{ 

		

	


		

	


		

	

	return null;
}




void anim_ft3() 
{ 

		

	


		

	


		

	


		

	

	return null;
}




void always_ft3() 
{ 

		

	


		

	


		

	


		

	

	return null;
}




void nofade_ft3_a() 
{ 

		

	


		

	

	return null;
}




void nofade_ft3_b() 
{ 

		

	


		

	

	return null;
}




void nofade_ft3_c() 
{ 

		

	


		

	

	return null;
}




void anim_gt3() 
{ 

		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	

	return null;
}




void nofade_gt3_a() 
{ 

		

	


		

	

	return null;
}




void nofade_gt3_b2() 
{ 

		

	


		

	


		

	

	return null;
}




void nofade_gt3_b() 
{ 

		

	


		

	

	return null;
}




void anim_nontext() 
{ 

		

	


		

	


		

	


		

	


		

	

	return null;
}




void anim_g3() 
{ 

		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	

	return null;
}




void anim_g3_from_t() 
{ 

		

	


		

	

	return null;
}




void anim_g3_overface() 
{ 

		

	


		

	


		

	

	return null;
}




void anim_f3() 
{ 

		

	


		

	


		

	


		

	


		

	

	return null;
}




void anim_next_mface() 
{ 

		

	


		

	


		

	


		

	


		

	

	return null;
}




void exit_AnimDraw() 
{ 

		

	

	return null;
}




void fogged_face() 
{ 

		

	


		

	

	return null;
}




void always_fogged_ft3() 
{ 

		

	


		

	


		

	


		

	

	return null;
}




void fanim_gt3() 
{ 

		

	


		

	


		

	


		

	


		

	

	return null;
}




void fog_backface() 
{ 

		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	

	return null;
}




void fog_backface2() 
{ 

		

	


		

	


		

	


		

	

	return null;
}




void fanim_nontext() 
{ 

		

	


		

	


		

	


		

	


		

	


		

	

	return null;
}




void fanim_g3() 
{ 

		

	


		

	


		

	


		

	


		

	

	return null;
}




void fanim_f3() 
{ 

		

	


		

	


		

	


		

	

	return null;
}




void faded_backpoly() 
{ 

		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	

	return null;
}




void faded_t5_smaller() 
{ 

		

	


		

	

	return null;
}




void faded_t6_min() 
{ 

		

	


		

	

	return null;
}




void faded_tpage_calc() 
{ 

		

	


		

	


		

	


		

	

	return null;
}




void do_super_subdiv() 
{ 

		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	

	return null;
}




void super_clip() 
{ 

		

	


		

	

	return null;
}





 

		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	

u_char DRAW_DisplayTFace_S(u_char param_1,u_int param_2,int param_3)

{
  u_char uVar1;
  long *plVar2;
  int iVar3;
  u_int uVar4;
  POLY_GT3 *in_t0;
  u_char in_t1;
  u_char in_t2;
  u_char in_t3;
  int in_t4;
  u_int uVar5;
  int iVar6;
  int in_t6;
  int iVar7;
  u_int unaff_s2;
  u_int unaff_s3;
  u_long **unaff_s4;
  u_int uVar8;
  int iVar9;
  u_int uVar10;
  int iVar11;
  u_char unaff_retaddr;
  
  uVar8 = getCopControlWord(2,0xf800);
  copFunction(2,0x1400006);
  uVar4 = getCopReg(2,0x6000);
  uVar5 = getCopReg(2,0x6800);
  uVar10 = getCopReg(2,0x7000);
  if (((uVar10 & uVar5 & uVar4 & 0x80008000) != 0) ||
     ((0xf00200 - uVar10 & 0xf00200 - uVar5 & 0xf00200 - uVar4 & 0x80008000) != 0)) {
    return 0;
  }
  if ((uVar8 & unaff_s2) == 0) {
    iVar3 = getCopReg(2,0xc000);
    if (-1 < iVar3) {
      return 1;
    }
    uVar4 = getCopReg(2,0x8800);
    uVar8 = getCopReg(2,0x9000);
    uVar5 = getCopReg(2,0x9800);
    if ((int)uVar4 <= (int)uVar8) {
      uVar4 = uVar8;
    }
    if ((int)uVar5 <= (int)uVar4) {
      uVar5 = uVar4;
    }
    param_3 = (uVar5 & 0xfffc) + (int)*(char *)(in_t4 + 200) * 0x10;
    if (0x2fff < param_3) {
      return 0;
    }
    if (param_3 < 0xa0) {
      return 0;
    }
    iVar6 = getCopReg(2,0x6000);
    iVar7 = getCopReg(2,0x6800);
    iVar11 = getCopReg(2,0x7000);
    copFunction(2,0xf8002a);
    iVar9 = (iVar6 >> 0x10) - (iVar7 >> 0x10);
    in_t6 = (iVar11 >> 0x10) - (iVar7 >> 0x10);
    iVar3 = (iVar6 >> 0x10) - (iVar11 >> 0x10);
    if ((((-0x200 < iVar9) && (iVar9 < 0x200)) && (-0x200 < iVar3)) &&
       (((iVar3 < 0x200 && (-0x200 < in_t6)) && (in_t6 < 0x200)))) {
      iVar9 = (int)(short)iVar6 - (int)(short)iVar7;
      iVar3 = (int)(short)iVar6 - (int)(short)iVar11;
      if (((-0x400 < iVar9) && (in_t6 = (int)(short)iVar11 - (int)(short)iVar7, iVar9 < 0x400)) &&
         ((-0x400 < iVar3 && (((iVar3 < 0x400 && (-0x400 < in_t6)) && (in_t6 < 0x400)))))) {
        uVar4 = *(u_int *)(param_3 + (int)unaff_s4);
        *(u_int *)(param_3 + (int)unaff_s4) = (u_int)in_t0 & param_2;
        in_t0->tag = uVar4 | unaff_s3;
        uVar1 = getCopReg(2,0xc);
        *(u_char *)&in_t0->x0 = uVar1;
        uVar1 = getCopReg(2,0xd);
        *(u_char *)&in_t0->x1 = uVar1;
        uVar1 = getCopReg(2,0xe);
        *(u_char *)&in_t0->x2 = uVar1;
        uVar1 = getCopReg(2,0x14);
        *(u_char *)&in_t0->r0 = uVar1;
        uVar1 = getCopReg(2,0x15);
        *(u_char *)&in_t0->r1 = uVar1;
        uVar1 = getCopReg(2,0x16);
        *(u_char *)&in_t0->r2 = uVar1;
        return 0;
      }
    }
  }
  *(POLY_GT3 **)(in_t4 + 0xdc) = in_t0;
  *(u_char *)(in_t4 + 0xe0) = in_t1;
  *(u_char *)(in_t4 + 0xe4) = in_t2;
  *(u_char *)(in_t4 + 0xe8) = in_t3;
  *(int *)(in_t4 + 0xec) = in_t6;
  *(u_int *)(in_t4 + 0xf0) = param_2;
  *(int *)(in_t4 + 0xf4) = param_3;
  *(u_char *)(in_t4 + 0xf8) = unaff_retaddr;
  plVar2 = DRAW_Zclip_subdiv(in_t0,unaff_s4,0);
  if (plVar2 == (long *)0x0) {
    return 1;
  }
  return 0;
}





void rLL2() 
{ 

		

	

	return null;
}




void rLL2A() 
{ 

		

	

	return null;
}




void subdiv_begin() 
{ 

		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	

	return null;
}




void not_liquid_26() 
{ 

		

	


		

	

	return null;
}




void next_tface_subdiv() 
{ 

		

	


		

	

	return null;
}





 

		

	


		

	


		

	


		

	

* WARNING: Instruction at (ram,0x800265e8) overlaps instruction at (ram,0x800265e4)



void DRAW_DisplaySubdivPolytope_S(int *param_1,int param_2)

{
  char cVar1;
  short sVar2;
  bool bVar3;
  u_char uVar4;
  u_short uVar5;
  u_char in_zero;
  u_int in_at;
  undefined uVar6;
  u_int uVar7;
  u_int uVar8;
  u_int uVar9;
  u_char extraout_v1;
  int iVar10;
  u_int uVar11;
  u_char uVar12;
  int *piVar13;
  u_int uVar14;
  int *piVar15;
  int *piVar16;
  u_int *in_t0;
  u_int *puVar17;
  int iVar18;
  int iVar19;
  u_int uVar20;
  u_int uVar21;
  u_char uVar22;
  int iVar23;
  int iVar24;
  u_int uVar25;
  u_char unaff_s0;
  u_char unaff_s1;
  u_int *puVar26;
  u_char unaff_s2;
  u_int uVar27;
  u_char unaff_s3;
  int unaff_s4;
  u_char unaff_s5;
  int iVar28;
  u_char unaff_s6;
  u_int *puVar29;
  u_char unaff_s7;
  u_int uVar30;
  int iVar31;
  int iVar32;
  int iVar33;
  u_int uVar34;
  u_char uVar35;
  u_char unaff_s8;
  u_char unaff_retaddr;
  longlong lVar36;
  undefined8 uVar37;
  
  iVar18 = 0x1f800000;
  DAT_1f8000ac = 0;
  iVar28 = *(int *)(param_2 + 0x1c);
  iVar10 = (int)*(short *)(*param_1 + 0xc);
  puVar26 = *(u_int **)(*param_1 + 8);
  _DAT_1f800014 = unaff_s8;
  DAT_1f800088 = unaff_s0;
  DAT_1f80008c = unaff_s1;
  DAT_1f800090 = unaff_s2;
  DAT_1f800094 = unaff_s3;
  DAT_1f800098 = unaff_s4;
  DAT_1f80009c = unaff_s5;
  DAT_1f8000a0 = unaff_s6;
  _DAT_1f8000a4 = unaff_s7;
  _DAT_1f8000a8 = unaff_retaddr;
  if (iVar10 != 0) {
    puVar29 = puVar26 + iVar10 * 3;
    iVar10 = *(int *)(param_2 + 0x34);
    uVar14 = 0xffffff;
    do {
      while( true ) {
        uVar7 = puVar26[1];
        uVar21 = (int)uVar7 >> 0x10;
        if ((uVar21 & 4) == 0) break;
skip_tface:
        *(u_char *)(iVar18 + 0xac) = 0;
joined_r0x80026958:
        puVar26 = puVar26 + 3;
        if (puVar29 <= puVar26) {
          return;
        }
      }
      piVar16 = (int *)(iVar28 + (*puVar26 & 0xffff) * 0xc);
      setCopReg(2,in_zero,*piVar16);
      setCopReg(2,in_at,piVar16[1]);
      copFunction(2,0x180001);
      piVar13 = (int *)(iVar28 + (*puVar26 >> 0x10) * 0xc);
      iVar24 = *piVar13;
      iVar31 = piVar13[1];
      uVar35 = getCopReg(2,8);
      *(u_char *)(iVar18 + 0xbc) = uVar35;
      setCopReg(2,0,iVar24);
      setCopReg(2,0x800,iVar31);
      uVar27 = getCopControlWord(2,0xf800);
      copFunction(2,0x180001);
      piVar15 = (int *)(iVar28 + (uVar7 & 0xffff) * 0xc);
      iVar24 = *piVar15;
      iVar31 = piVar15[1];
      uVar35 = getCopReg(2,8);
      *(u_char *)(iVar18 + 0xc0) = uVar35;
      setCopReg(2,0,iVar24);
      setCopReg(2,0x800,iVar31);
      uVar8 = getCopControlWord(2,0xf800);
      copFunction(2,0x180001);
      puVar17 = (u_int *)(*(short *)((int)puVar26 + 10) + iVar10);
      uVar25 = *puVar17;
      uVar30 = puVar17[1];
      uVar11 = puVar17[2];
      uVar9 = getCopControlWord(2,0xf800);
      uVar35 = getCopReg(2,8);
      *(u_char *)(iVar18 + 0xc4) = uVar35;
      uVar9 = uVar27 | uVar8 | uVar9;
      copFunction(2,0x1400006);
      in_t0[3] = uVar25;
      in_t0[6] = uVar30;
      in_t0[9] = uVar11;
      *(u_int *)(iVar18 + 0xd8) = uVar11;
      iVar24 = getCopReg(2,0xc000);
      if (-1 < iVar24) {
        in_at = 0x26000;
        uVar8 = uVar9 & 0x26000;
        uVar9 = 0x6000;
        if (uVar8 != 0) {
          iVar24 = getCopReg(2,0x8800);
          iVar31 = getCopReg(2,0x9000);
          iVar33 = getCopReg(2,0x9800);
          in_at = (u_int)(iVar24 < 0x801);
          if ((iVar24 < 0x801) && (((0x9f < iVar24 || (0x9f < iVar31)) || (0x9f < iVar33))))
          goto do_poly;
        }
        goto skip_tface;
      }
do_poly:
      uVar8 = getCopReg(2,0x6000);
      uVar11 = getCopReg(2,0x6800);
      uVar25 = getCopReg(2,0x7000);
      if (((uVar25 & uVar11 & uVar8 & 0x80008000) != 0) ||
         ((0xf00200 - uVar25 & 0xf00200 - uVar11 & 0xf00200 - uVar8 & 0x80008000) != 0))
      goto skip_tface;
      iVar24 = piVar13[2];
      uVar27 = piVar16[2];
      *(int *)(iVar18 + 0x84) = piVar15[2];
      *(int *)(iVar18 + 0x80) = iVar24;
      *(u_int *)(iVar18 + 0x7c) = uVar27;
      iVar24 = *piVar16;
      if (*(int *)(iVar18 + 0x18) != 0) {
        uVar35 = getCopReg(2,8);
        *(u_char *)(iVar18 + 0xc4) = uVar35;
        iVar31 = (int)(short)iVar24 - *(int *)(iVar18 + 0x1c);
        iVar24 = (iVar24 >> 0x10) - *(int *)(iVar18 + 0x20);
        if (iVar31 < 0) {
          iVar31 = -iVar31;
        }
        if (iVar24 < 0) {
          iVar24 = -iVar24;
        }
        iVar33 = *(int *)(iVar18 + 0x18);
        if (iVar24 <= iVar31) {
          iVar24 = iVar31;
        }
        iVar31 = (int)*(short *)(piVar16 + 1) - *(int *)(iVar18 + 0x24);
        if (iVar31 < 0) {
          iVar31 = -iVar31;
        }
        if (iVar24 <= iVar31) {
          iVar24 = iVar31;
        }
        if (iVar24 < *(short *)(iVar33 + 0x10)) {
          setCopReg(2,uVar8,*(u_char *)(iVar33 + 4));
          setCopReg(2,uVar11,*(u_char *)(iVar33 + 8));
          setCopReg(2,uVar25,*(u_char *)(iVar33 + 0xc));
          setCopReg(2,0x4000,(*(short *)(iVar33 + 0x10) - iVar24) * 0x10);
          setCopReg(2,0x3000,uVar27);
          uVar27 = uVar27 & uVar14;
          setCopReg(2,0xc800,(uVar27 & 0xff) << 4);
          setCopReg(2,0xd000,(uVar27 & 0xff00) >> 4);
          setCopReg(2,0xd800,(uVar27 >> 0x10) << 4);
          copFunction(2,0x1a8003e);
          uVar35 = getCopReg(2,0x16);
          *(u_char *)(iVar18 + 0x7c) = uVar35;
        }
        iVar24 = (int)(short)*piVar13 - *(int *)(iVar18 + 0x1c);
        iVar31 = (*piVar13 >> 0x10) - *(int *)(iVar18 + 0x20);
        if (iVar24 < 0) {
          iVar24 = -iVar24;
        }
        if (iVar31 < 0) {
          iVar31 = -iVar31;
        }
        iVar33 = *(int *)(iVar18 + 0x18);
        if (iVar31 <= iVar24) {
          iVar31 = iVar24;
        }
        iVar24 = (int)*(short *)(piVar13 + 1) - *(int *)(iVar18 + 0x24);
        if (iVar24 < 0) {
          iVar24 = -iVar24;
        }
        if (iVar31 <= iVar24) {
          iVar31 = iVar24;
        }
        if (iVar31 < *(short *)(iVar33 + 0x10)) {
          setCopReg(2,uVar8,*(u_char *)(iVar33 + 4));
          setCopReg(2,uVar11,*(u_char *)(iVar33 + 8));
          setCopReg(2,uVar25,*(u_char *)(iVar33 + 0xc));
          setCopReg(2,0x4000,(*(short *)(iVar33 + 0x10) - iVar31) * 0x10);
          setCopReg(2,0x3000,*(u_int *)(iVar18 + 0x80));
          uVar27 = *(u_int *)(iVar18 + 0x80) & uVar14;
          setCopReg(2,0xc800,(uVar27 & 0xff) << 4);
          setCopReg(2,0xd000,(uVar27 & 0xff00) >> 4);
          setCopReg(2,0xd800,(uVar27 >> 0x10) << 4);
          copFunction(2,0x1a8003e);
          uVar35 = getCopReg(2,0x16);
          *(u_char *)(iVar18 + 0x80) = uVar35;
        }
        iVar24 = (int)(short)*piVar15 - *(int *)(iVar18 + 0x1c);
        iVar31 = (*piVar15 >> 0x10) - *(int *)(iVar18 + 0x20);
        if (iVar24 < 0) {
          iVar24 = -iVar24;
        }
        if (iVar31 < 0) {
          iVar31 = -iVar31;
        }
        iVar33 = *(int *)(iVar18 + 0x18);
        if (iVar31 <= iVar24) {
          iVar31 = iVar24;
        }
        iVar24 = (int)*(short *)(piVar15 + 1) - *(int *)(iVar18 + 0x24);
        iVar19 = (int)*(short *)(iVar33 + 0x10);
        if (iVar24 < 0) {
          iVar24 = -iVar24;
        }
        if (iVar31 <= iVar24) {
          iVar31 = iVar24;
        }
        in_at = (u_int)(iVar31 < iVar19);
        if (iVar31 < iVar19) {
          setCopReg(2,uVar8,*(u_char *)(iVar33 + 4));
          setCopReg(2,uVar11,*(u_char *)(iVar33 + 8));
          setCopReg(2,uVar25,*(u_char *)(iVar33 + 0xc));
          setCopReg(2,0x4000,(iVar19 - iVar31) * 0x10);
          setCopReg(2,0x3000,*(u_int *)(iVar18 + 0x84));
          uVar27 = *(u_int *)(iVar18 + 0x84) & uVar14;
          setCopReg(2,0xc800,(uVar27 & 0xff) << 4);
          setCopReg(2,0xd000,(uVar27 & 0xff00) >> 4);
          setCopReg(2,0xd800,(uVar27 >> 0x10) << 4);
          copFunction(2,0x1a8003e);
          uVar35 = getCopReg(2,0x16);
          *(u_char *)(iVar18 + 0x84) = uVar35;
        }
        setCopReg(2,in_t0,*(u_char *)(iVar18 + 0xc4));
      }
      if ((uVar21 & 8) != 0) {
no_subdiv:
        *(u_char *)(iVar18 + 0xac) = 0;
        if ((uVar9 & 0x66000) != 0) goto subdiv_begin;
        *(u_char *)(iVar18 + 0xac) = 0;
        uVar27 = getCopReg(2,0x8800);
        uVar34 = getCopReg(2,0x9000);
        uVar20 = getCopReg(2,0x9800);
        uVar9 = uVar34;
        if ((int)uVar27 <= (int)uVar34) {
          uVar9 = uVar27;
          uVar27 = uVar34;
        }
        uVar34 = uVar20;
        if ((int)uVar20 <= (int)uVar27) {
          uVar34 = uVar27;
          uVar27 = uVar20;
        }
        in_at = (u_int)((int)uVar9 < (int)uVar27);
        if ((int)uVar9 >= (int)uVar27) {
          uVar9 = uVar27;
        }
        uVar34 = uVar34 & 0xfffc;
        iVar24 = uVar34 + ((int)uVar7 >> 0x18) * 0x10;
        if (((iVar24 < 1) || (uVar34 < 0xa0)) ||
           ((0x2fff < iVar24 ||
            (bVar3 = (int)uVar9 < *(int *)(iVar18 + 0xd0), in_at = (u_int)bVar3, !bVar3))))
        goto skip_tface;
        in_at = (u_int)((int)uVar9 < 0x280);
        if ((int)uVar9 < 0x280) goto subdiv_begin;
        if ((int)uVar34 < *(int *)(iVar18 + 0xb0)) {
          uVar35 = getCopReg(2,0xa800);
          if ((uVar21 & 8) != 0) {
            uVar22 = getCopReg(2,0xb000);
            uVar12 = getCopReg(2,0xb800);
            setCopReg(2,0xa800,0);
            setCopReg(2,0xb000,0);
            setCopReg(2,0xb800,0);
            iVar31 = getCopReg(2,0x8800);
            iVar31 = 0x1000 - iVar31;
            if (iVar31 < 0x1001) {
              if (iVar31 < 1) {
                iVar31 = 0;
              }
              setCopReg(2,piVar15,*(u_char *)(iVar18 + 0x7c));
              setCopReg(2,0x4000,iVar31);
              copFunction(2,0x780010);
              uVar4 = getCopReg(2,0x16);
              *(u_char *)(iVar18 + 0x7c) = uVar4;
            }
            iVar31 = getCopReg(2,0x9000);
            iVar31 = 0x1000 - iVar31;
            if (iVar31 < 0x1001) {
              if (iVar31 < 1) {
                iVar31 = 0;
              }
              setCopReg(2,piVar15,*(u_char *)(iVar18 + 0x80));
              setCopReg(2,0x4000,iVar31);
              copFunction(2,0x780010);
              uVar4 = getCopReg(2,0x16);
              *(u_char *)(iVar18 + 0x80) = uVar4;
            }
            iVar31 = getCopReg(2,0x9800);
            iVar31 = 0x1000 - iVar31;
            in_at = (u_int)(0x1000 < iVar31);
            if (0x1000 >= iVar31) {
              if (iVar31 < 1) {
                iVar31 = 0;
              }
              setCopReg(2,piVar15,*(u_char *)(iVar18 + 0x84));
              setCopReg(2,0x4000,iVar31);
              copFunction(2,0x780010);
              uVar4 = getCopReg(2,0x16);
              *(u_char *)(iVar18 + 0x84) = uVar4;
            }
            setCopReg(2,0xa800,uVar35);
            setCopReg(2,0xb000,uVar22);
            setCopReg(2,0xb800,uVar12);
          }
          uVar21 = *(u_int *)(iVar18 + 0x80);
          uVar7 = *(u_int *)(iVar18 + 0x7c);
          in_t0[7] = *(u_int *)(iVar18 + 0x84);
          in_t0[4] = uVar21;
          in_t0[1] = uVar7;
          in_t0[8] = uVar25;
          uVar7 = *(u_int *)(iVar24 + unaff_s4);
          *(u_int *)(iVar24 + unaff_s4) = (u_int)in_t0 & uVar14;
          *in_t0 = uVar7 | 0x9000000;
          in_t0[2] = uVar8;
          in_t0[5] = uVar11;
          in_t0 = in_t0 + 10;
        }
        else {
          setCopReg(2,piVar15,*(u_char *)(iVar18 + 0x84));
          setCopReg(2,in_t0,*(u_char *)(iVar18 + 0xc4));
          puVar17 = (u_int *)(iVar24 + unaff_s4);
          uVar7 = *puVar17;
          copFunction(2,0x780010);
          *puVar17 = (u_int)in_t0 & uVar14;
          *in_t0 = uVar7 | 0x9000000;
          uVar7 = getCopReg(2,0x16);
          in_t0[7] = uVar7;
          setCopReg(2,puVar17,*(u_char *)(iVar18 + 0x80));
          setCopReg(2,in_t0,*(u_char *)(iVar18 + 0xc0));
          copFunction(2,0x780010);
          in_t0[8] = uVar25;
          in_t0[5] = uVar11;
          cVar1 = *(char *)(iVar18 + 0x7f);
          uVar7 = getCopReg(2,0x16);
          in_t0[4] = uVar7;
          setCopReg(2,puVar17,*(u_char *)(iVar18 + 0x7c));
          setCopReg(2,in_t0,*(u_char *)(iVar18 + 0xbc));
          uVar35 = *(u_char *)(iVar18 + 0xcc);
          in_t0[2] = uVar8;
          copFunction(2,0x780010);
          bVar3 = *(int *)(iVar18 + 0xb8) < (int)uVar34;
          in_at = (u_int)bVar3;
          puVar17 = in_t0 + 10;
          if ((bVar3) && ((uVar21 & 1 | (int)cVar1 & 2U) == 0)) {
            uVar5 = (u_short)(uVar30 >> 0x10);
            if (*(char *)(iVar18 + 0xda) == '\0') {
              setCopReg(2,0x3000,uVar35);
              uVar7 = getCopReg(2,0xb000);
              in_t0[1] = uVar7 | 0x2000000;
              iVar33 = *(int *)(iVar18 + 0xcc);
              copFunction(2,0x780010);
              *(u_short *)((int)in_t0 + 0x1a) = uVar5 & 0xff9f | 0x20;
              uVar35 = *(u_char *)(iVar18 + 0xc0);
              in_t0[0xd] = uVar8;
              iVar31 = getCopReg(2,0xb000);
              in_t0[0xc] = iVar33 - iVar31 | 0x30000000;
              setCopReg(2,0x4000,uVar35);
              copFunction(2,0x780010);
              uVar35 = *(u_char *)(iVar18 + 0xc4);
              in_t0[0xf] = uVar11;
              in_t0[0xb] = 0xe1000640;
              iVar31 = getCopReg(2,0xb000);
              in_t0[0xe] = iVar33 - iVar31;
              setCopReg(2,0x4000,uVar35);
              copFunction(2,0x780010);
              uVar7 = *(u_int *)(iVar24 + unaff_s4);
              *(u_int *)(iVar24 + unaff_s4) = (u_int)puVar17 & uVar14;
              in_at = 0x7000000;
              *puVar17 = uVar7 | 0x7000000;
              in_t0[0x11] = uVar25;
              iVar24 = getCopReg(2,0xb000);
              in_t0[0x10] = iVar33 - iVar24;
              in_t0 = in_t0 + 0x12;
            }
            else {
              setCopReg(2,0x3000,uVar35);
              uVar7 = getCopReg(2,0xb000);
              in_t0[1] = uVar7 | 0x2000000;
              iVar31 = *(int *)(iVar18 + 0xcc);
              if ((uVar7 & 0xff000000 | 0x2000000) != 0x36000000) {
                getCopReg(2,0xb000);
              }
              copFunction(2,0x780010);
              *(u_short *)((int)in_t0 + 0x1a) = uVar5 & 0xff9f | 0x20;
              uVar35 = *(u_char *)(iVar18 + 0xc0);
              in_t0[0xc] = uVar8;
              iVar33 = getCopReg(2,0xb000);
              in_t0[0xb] = iVar31 - iVar33 | 0x34000000;
              setCopReg(2,0x4000,uVar35);
              in_t0[0x10] = uVar30 & 0xff9fffff;
              copFunction(2,0x780010);
              in_t0[0xd] = in_t0[3];
              in_t0[0x13] = in_t0[9];
              *(undefined2 *)((int)in_t0 + 0x36) = *(undefined2 *)(iVar18 + 0xd4);
              uVar35 = *(u_char *)(iVar18 + 0xc4);
              in_t0[0xf] = uVar11;
              iVar33 = getCopReg(2,0xb000);
              in_t0[0xe] = iVar31 - iVar33;
              setCopReg(2,0x4000,uVar35);
              copFunction(2,0x780010);
              uVar7 = *(u_int *)(iVar24 + unaff_s4);
              *(u_int *)(iVar24 + unaff_s4) = (u_int)puVar17 & uVar14;
              in_at = 0x9000000;
              *puVar17 = uVar7 | 0x9000000;
              in_t0[0x12] = uVar25;
              iVar24 = getCopReg(2,0xb000);
              in_t0[0x11] = iVar31 - iVar24;
              in_t0 = in_t0 + 0x14;
            }
          }
          else {
            uVar7 = getCopReg(2,0x16);
            in_t0[1] = uVar7;
            in_t0 = puVar17;
          }
        }
        goto joined_r0x80026958;
      }
      if ((uVar21 & 2) == 0) {
        iVar24 = getCopReg(2,0xc000);
code_r0x800265f0:
        *(undefined **)(iVar18 + 0xac) = &DAT_00004e20 + iVar24;
        if (-1 < (int)(&DAT_00004e20 + iVar24)) goto no_subdiv;
      }
      else {
        iVar24 = getCopReg(2,0xc000);
        if (*(int *)(iVar18 + 0xac) == 0) goto code_r0x800265f0;
      }
subdiv_begin:
      uVar35 = getCopReg(2,0xa800);
      if ((uVar21 & 8) != 0) {
        uVar22 = getCopReg(2,0xb000);
        uVar12 = getCopReg(2,0xb800);
        setCopReg(2,0xa800,0);
        setCopReg(2,0xb000,0);
        setCopReg(2,0xb800,0);
        iVar24 = getCopReg(2,0x8800);
        iVar24 = 0x1000 - iVar24;
        if (iVar24 < 0x1001) {
          if (iVar24 < 1) {
            iVar24 = 0;
          }
          setCopReg(2,piVar15,*(u_char *)(iVar18 + 0x7c));
          setCopReg(2,0x4000,iVar24);
          copFunction(2,0x780010);
          uVar4 = getCopReg(2,0x16);
          *(u_char *)(iVar18 + 0x7c) = uVar4;
        }
        iVar24 = getCopReg(2,0x9000);
        iVar24 = 0x1000 - iVar24;
        if (iVar24 < 0x1001) {
          if (iVar24 < 1) {
            iVar24 = 0;
          }
          setCopReg(2,piVar15,*(u_char *)(iVar18 + 0x80));
          setCopReg(2,0x4000,iVar24);
          copFunction(2,0x780010);
          uVar4 = getCopReg(2,0x16);
          *(u_char *)(iVar18 + 0x80) = uVar4;
        }
        iVar24 = getCopReg(2,0x9800);
        iVar24 = 0x1000 - iVar24;
        in_at = (u_int)(0x1000 < iVar24);
        if (0x1000 >= iVar24) {
          if (iVar24 < 1) {
            iVar24 = 0;
          }
          setCopReg(2,piVar15,*(u_char *)(iVar18 + 0x84));
          setCopReg(2,0x4000,iVar24);
          copFunction(2,0x780010);
          uVar4 = getCopReg(2,0x16);
          *(u_char *)(iVar18 + 0x84) = uVar4;
        }
        setCopReg(2,0xa800,uVar35);
        setCopReg(2,0xb000,uVar22);
        setCopReg(2,0xb800,uVar12);
      }
      iVar33 = *piVar16;
      iVar32 = (int)*(short *)(piVar16 + 1);
      iVar19 = *piVar13;
      iVar31 = (int)*(short *)(piVar13 + 1);
      iVar24 = *piVar15;
      iVar23 = (int)*(short *)(piVar15 + 1);
      *(int *)(iVar18 + 0x30) = iVar19;
      *(int *)(iVar18 + 0x34) = iVar31;
      *(int *)(iVar18 + 0x28) = iVar33;
      *(int *)(iVar18 + 0x2c) = iVar32;
      *(int *)(iVar18 + 0x38) = iVar24;
      *(int *)(iVar18 + 0x3c) = iVar23;
      *(undefined2 *)(iVar18 + 0x40) = (short)((int)(short)iVar33 + (int)(short)iVar19 >> 1);
      *(undefined2 *)(iVar18 + 0x42) = (short)((iVar33 >> 0x10) + (iVar19 >> 0x10) >> 1);
      *(undefined2 *)(iVar18 + 0x44) = (short)(iVar32 + iVar31 >> 1);
      *(undefined2 *)(iVar18 + 0x48) = (short)((int)(short)iVar19 + (int)(short)iVar24 >> 1);
      *(undefined2 *)(iVar18 + 0x4a) = (short)((iVar19 >> 0x10) + (iVar24 >> 0x10) >> 1);
      *(undefined2 *)(iVar18 + 0x4c) = (short)(iVar31 + iVar23 >> 1);
      *(undefined2 *)(iVar18 + 0x50) = (short)((int)(short)iVar24 + (int)(short)iVar33 >> 1);
      *(undefined2 *)(iVar18 + 0x52) = (short)((iVar24 >> 0x10) + (iVar33 >> 0x10) >> 1);
      *(undefined2 *)(iVar18 + 0x54) = (short)(iVar23 + iVar32 >> 1);
      uVar11 = *puVar17;
      uVar25 = puVar17[1];
      uVar7 = puVar17[2];
      uVar21 = uVar11 >> 8 & 0xff;
      uVar8 = uVar25 >> 8 & 0xff;
      uVar9 = uVar7 >> 8 & 0xff;
      *(u_int *)(iVar18 + 0x58) = uVar11;
      *(u_int *)(iVar18 + 0x5c) = uVar25;
      *(u_int *)(iVar18 + 0x60) = uVar7;
      *(undefined *)(iVar18 + 100) = (char)((uVar11 & 0xff) + (uVar25 & 0xff) >> 1);
      *(undefined *)(iVar18 + 0x65) = (char)(uVar21 + uVar8 >> 1);
      *(undefined *)(iVar18 + 0x68) = (char)((uVar25 & 0xff) + (uVar7 & 0xff) >> 1);
      *(undefined *)(iVar18 + 0x69) = (char)(uVar8 + uVar9 >> 1);
      *(undefined *)(iVar18 + 0x6c) = (char)((uVar7 & 0xff) + (uVar11 & 0xff) >> 1);
      *(undefined *)(iVar18 + 0x6d) = (char)(uVar9 + uVar21 >> 1);
      uVar7 = *(u_int *)(iVar18 + 0x7c);
      uVar9 = *(u_int *)(iVar18 + 0x80);
      uVar27 = *(u_int *)(iVar18 + 0x84);
      uVar21 = uVar7 >> 8 & 0xff;
      uVar8 = uVar7 >> 0x10 & 0xff;
      *(u_int *)(iVar18 + 0x7c) = uVar7;
      uVar11 = uVar9 >> 8 & 0xff;
      uVar25 = uVar9 >> 0x10 & 0xff;
      *(u_int *)(iVar18 + 0x80) = uVar9;
      uVar30 = uVar27 >> 8 & 0xff;
      uVar20 = uVar27 >> 0x10 & 0xff;
      *(u_int *)(iVar18 + 0x84) = uVar27;
      uVar6 = (undefined)(uVar27 >> 0x18);
      *(undefined *)(iVar18 + 0x73) = uVar6;
      *(undefined *)(iVar18 + 0x77) = uVar6;
      *(undefined *)(iVar18 + 0x7b) = uVar6;
      *(undefined *)(iVar18 + 0x70) = (char)((int)((uVar7 & 0xff) + (uVar9 & 0xff)) >> 1);
      *(undefined *)(iVar18 + 0x71) = (char)((int)(uVar21 + uVar11) >> 1);
      *(undefined *)(iVar18 + 0x72) = (char)((int)(uVar8 + uVar25) >> 1);
      *(undefined *)(iVar18 + 0x74) = (char)((int)((uVar9 & 0xff) + (uVar27 & 0xff)) >> 1);
      *(undefined *)(iVar18 + 0x75) = (char)((int)(uVar11 + uVar30) >> 1);
      *(undefined *)(iVar18 + 0x76) = (char)((int)(uVar25 + uVar20) >> 1);
      *(undefined *)(iVar18 + 0x78) = (char)((int)((uVar7 & 0xff) + (uVar27 & 0xff)) >> 1);
      *(undefined *)(iVar18 + 0x79) = (char)((int)(uVar21 + uVar30) >> 1);
      *(undefined *)(iVar18 + 0x7a) = (char)((int)(uVar8 + uVar20) >> 1);
      sVar2 = *(short *)(iVar18 + 0x5e);
      uVar6 = *(undefined *)((int)puVar26 + 7);
      *(short *)(iVar18 + 0x66) = sVar2;
      *(short *)(iVar18 + 0x6a) = sVar2;
      *(short *)(iVar18 + 0x6e) = *(short *)(iVar18 + 0x5a);
      *(undefined *)(iVar18 + 200) = uVar6;
      setCopReg(2,in_zero,*(u_char *)(iVar18 + 0x28));
      setCopReg(2,in_at,*(u_char *)(iVar18 + 0x2c));
      setCopReg(2,(int)*(short *)(iVar18 + 0x5a),*(u_char *)(iVar18 + 0x40));
      setCopReg(2,(int)sVar2,*(u_char *)(iVar18 + 0x44));
      setCopReg(2,piVar13,*(u_char *)(iVar18 + 0x50));
      setCopReg(2,uVar14,*(u_char *)(iVar18 + 0x54));
      copFunction(2,0x280030);
      uVar7 = *(u_int *)(iVar18 + 100);
      uVar21 = *(u_int *)(iVar18 + 0x6c);
      in_t0[3] = *(u_int *)(iVar18 + 0x58);
      in_t0[6] = uVar7;
      in_t0[9] = uVar21;
      setCopReg(2,iVar28,*(u_char *)(iVar18 + 0x70));
      setCopReg(2,puVar29,*(u_char *)(iVar18 + 0x78));
      setCopReg(2,0xa000,*(u_char *)(iVar18 + 0x7c));
      setCopReg(2,0x3000,*(u_char *)(iVar18 + 0x7c));
      lVar36 = DRAW_DisplayTFace_S();
      if (lVar36 < 0x100000000) {
        setCopReg(2,in_zero,*(u_char *)(iVar18 + 0x50));
        setCopReg(2,in_at,*(u_char *)(iVar18 + 0x54));
        setCopReg(2,(int)((u_longlong)lVar36 >> 0x20),*(u_char *)(iVar18 + 0x48));
        setCopReg(2,(int)lVar36,*(u_char *)(iVar18 + 0x4c));
        setCopReg(2,piVar13,*(u_char *)(iVar18 + 0x38));
        setCopReg(2,uVar14,*(u_char *)(iVar18 + 0x3c));
        copFunction(2,0x280030);
        uVar7 = *(u_int *)(iVar18 + 0x68);
        uVar21 = *(u_int *)(iVar18 + 0x60);
        in_t0[3] = *(u_int *)(iVar18 + 0x6c);
        in_t0[6] = uVar7;
        in_t0[9] = uVar21;
        setCopReg(2,iVar28,*(u_char *)(iVar18 + 0x74));
        setCopReg(2,puVar29,*(u_char *)(iVar18 + 0x84));
        setCopReg(2,0xa000,*(u_char *)(iVar18 + 0x78));
        setCopReg(2,0x3000,*(u_char *)(iVar18 + 0x78));
        iVar24 = DRAW_DisplayTFace_S();
        if (iVar24 < 1) {
          *(short *)(iVar18 + 0x66) = *(short *)(iVar18 + 0x5a);
          *(short *)(iVar18 + 0x6e) = *(short *)(iVar18 + 0x5e);
          setCopReg(2,in_zero,*(u_char *)(iVar18 + 0x40));
          setCopReg(2,in_at,*(u_char *)(iVar18 + 0x44));
          setCopReg(2,(int)*(short *)(iVar18 + 0x5a),*(u_char *)(iVar18 + 0x48));
          setCopReg(2,(int)*(short *)(iVar18 + 0x5e),*(u_char *)(iVar18 + 0x4c));
          setCopReg(2,piVar13,*(u_char *)(iVar18 + 0x50));
          setCopReg(2,uVar14,*(u_char *)(iVar18 + 0x54));
          copFunction(2,0x280030);
          uVar7 = *(u_int *)(iVar18 + 0x68);
          uVar21 = *(u_int *)(iVar18 + 0x6c);
          in_t0[3] = *(u_int *)(iVar18 + 100);
          in_t0[6] = uVar7;
          in_t0[9] = uVar21;
          setCopReg(2,iVar28,*(u_char *)(iVar18 + 0x74));
          setCopReg(2,puVar29,*(u_char *)(iVar18 + 0x78));
          setCopReg(2,0xa000,*(u_char *)(iVar18 + 0x70));
          setCopReg(2,0x3000,*(u_char *)(iVar18 + 0x70));
          lVar36 = DRAW_DisplayTFace_S();
          if (lVar36 < 0x100000000) {
            setCopReg(2,in_zero,*(u_char *)(iVar18 + 0x40));
            setCopReg(2,in_at,*(u_char *)(iVar18 + 0x44));
            setCopReg(2,(int)((u_longlong)lVar36 >> 0x20),*(u_char *)(iVar18 + 0x30));
            setCopReg(2,(int)lVar36,*(u_char *)(iVar18 + 0x34));
            setCopReg(2,piVar13,*(u_char *)(iVar18 + 0x48));
            setCopReg(2,uVar14,*(u_char *)(iVar18 + 0x4c));
            copFunction(2,0x280030);
            uVar7 = *(u_int *)(iVar18 + 0x5c);
            uVar21 = *(u_int *)(iVar18 + 0x68);
            in_t0[3] = *(u_int *)(iVar18 + 100);
            in_t0[6] = uVar7;
            in_t0[9] = uVar21;
            setCopReg(2,iVar28,*(u_char *)(iVar18 + 0x80));
            setCopReg(2,puVar29,*(u_char *)(iVar18 + 0x74));
            setCopReg(2,0xa000,*(u_char *)(iVar18 + 0x70));
            setCopReg(2,0x3000,*(u_char *)(iVar18 + 0x70));
            lVar36 = DRAW_DisplayTFace_S();
            if (lVar36 < 0x100000000) {
              iVar24 = (int)*(char *)(iVar18 + 200) + 1;
              *(undefined *)(iVar18 + 200) = (char)iVar24;
              setCopReg(2,in_zero,*(u_char *)(iVar18 + 0x28));
              setCopReg(2,in_at,*(u_char *)(iVar18 + 0x2c));
              setCopReg(2,iVar24,*(u_char *)(iVar18 + 0x30));
              setCopReg(2,(int)lVar36,*(u_char *)(iVar18 + 0x34));
              setCopReg(2,piVar13,*(u_char *)(iVar18 + 0x40));
              setCopReg(2,uVar14,*(u_char *)(iVar18 + 0x44));
              copFunction(2,0x280030);
              uVar7 = *(u_int *)(iVar18 + 0x5c);
              uVar21 = *(u_int *)(iVar18 + 100);
              in_t0[3] = *(u_int *)(iVar18 + 0x58);
              in_t0[6] = uVar7;
              in_t0[9] = uVar21;
              setCopReg(2,iVar28,*(u_char *)(iVar18 + 0x80));
              setCopReg(2,puVar29,*(u_char *)(iVar18 + 0x70));
              setCopReg(2,0xa000,*(u_char *)(iVar18 + 0x7c));
              setCopReg(2,0x3000,*(u_char *)(iVar18 + 0x7c));
              DRAW_DisplayTFace_S();
              *(short *)(iVar18 + 0x6a) = *(short *)(iVar18 + 0x5a);
              setCopReg(2,in_zero,*(u_char *)(iVar18 + 0x48));
              setCopReg(2,in_at,*(u_char *)(iVar18 + 0x4c));
              setCopReg(2,(int)*(short *)(iVar18 + 0x5a),*(u_char *)(iVar18 + 0x30));
              setCopReg(2,extraout_v1,*(u_char *)(iVar18 + 0x34));
              setCopReg(2,piVar13,*(u_char *)(iVar18 + 0x38));
              setCopReg(2,uVar14,*(u_char *)(iVar18 + 0x3c));
              copFunction(2,0x280030);
              uVar7 = *(u_int *)(iVar18 + 0x5c);
              uVar21 = *(u_int *)(iVar18 + 0x60);
              in_t0[3] = *(u_int *)(iVar18 + 0x68);
              in_t0[6] = uVar7;
              in_t0[9] = uVar21;
              setCopReg(2,iVar28,*(u_char *)(iVar18 + 0x80));
              setCopReg(2,puVar29,*(u_char *)(iVar18 + 0x84));
              setCopReg(2,0xa000,*(u_char *)(iVar18 + 0x74));
              setCopReg(2,0x3000,*(u_char *)(iVar18 + 0x74));
              uVar37 = DRAW_DisplayTFace_S();
              setCopReg(2,in_zero,*(u_char *)(iVar18 + 0x28));
              setCopReg(2,in_at,*(u_char *)(iVar18 + 0x2c));
              setCopReg(2,(int)((u_longlong)uVar37 >> 0x20),*(u_char *)(iVar18 + 0x50));
              setCopReg(2,(int)uVar37,*(u_char *)(iVar18 + 0x54));
              setCopReg(2,piVar13,*(u_char *)(iVar18 + 0x38));
              setCopReg(2,uVar14,*(u_char *)(iVar18 + 0x3c));
              copFunction(2,0x280030);
              uVar7 = *(u_int *)(iVar18 + 0x6c);
              uVar21 = *(u_int *)(iVar18 + 0x60);
              in_t0[3] = *(u_int *)(iVar18 + 0x58);
              in_t0[6] = uVar7;
              in_t0[9] = uVar21;
              setCopReg(2,iVar28,*(u_char *)(iVar18 + 0x78));
              setCopReg(2,puVar29,*(u_char *)(iVar18 + 0x84));
              setCopReg(2,0xa000,*(u_char *)(iVar18 + 0x7c));
              setCopReg(2,0x3000,*(u_char *)(iVar18 + 0x7c));
              DRAW_DisplayTFace_S();
            }
          }
        }
      }
      puVar26 = puVar26 + 3;
    } while (puVar26 < puVar29);
  }
  return;
}





void do_poly() 
{ 

		

	


		

	


		

	

	return null;
}




void positive() 
{ 

		

	


		

	

	return null;
}




void not_quad() 
{ 

		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	

	return null;
}




void no_subdiv() 
{ 

		

	


		

	

	return null;
}




void maxL1() 
{ 

		

	

	return null;
}




void maxL2() 
{ 

		

	

	return null;
}




void minL1() 
{ 

		

	

	return null;
}




void not_liquid_54() 
{ 

		

	

	return null;
}




void depthQface() 
{ 

		

	


		

	


		

	


		

	


		

	

	return null;
}




void no_depthQ() 
{ 

		

	


		

	

	return null;
}




void skip_tface() 
{ 

		

	


		

	

	return null;
}




void no_blend2() 
{ 

		

	


		

	


		

	


		

	

	return null;
}




void end_of_polytope() 
{ 

		

	


		

	


		

	


		

	


		

	


		

	


		

	

	return null;
}




void draw_trans_fog() 
{ 

		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	

	return null;
}




void OK() 
{ 

		

	


		

	


		

	


		

	

	return null;
}




void no_depthQ2() 
{ 

		

	


		

	

	return null;
}




void DRAW_DisplayPolytopeList_S() 
{ 

		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	

	return null;
}





 

		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	



u_int PIPE3D_TransformAnimatedInstanceVertices_S
               (int param_1,u_char *param_2,u_int param_3,u_char *param_4,u_short *param_5,
               u_char *param_6,u_int *param_7,u_int *param_8)

{
  u_int uVar1;
  int iVar2;
  u_char uVar3;
  u_char *puVar4;
  u_char *puVar5;
  int iVar6;
  u_int uVar7;
  u_char uVar8;
  u_char *puVar9;
  int iVar10;
  u_int uVar11;
  u_char uVar12;
  u_char uVar13;
  u_int uVar14;
  int iVar15;
  u_char uVar16;
  u_char uVar17;
  u_char *puVar18;
  u_char unaff_s0;
  u_char uVar19;
  u_char unaff_s1;
  u_int *puVar20;
  u_char unaff_s2;
  u_char unaff_s3;
  u_char unaff_s4;
  u_char unaff_s5;
  u_char unaff_s6;
  u_int *puVar21;
  int iVar22;
  
  iVar6 = *(int *)(param_3 + 0x18);
  if (0 < iVar6) {
    iVar22 = *(int *)(param_3 + 0x1c);
    _DAT_1f800000 = *param_4;
    _DAT_1f800004 = param_4[1];
    _DAT_1f800008 = param_4[2];
    _DAT_1f80000c = param_4[3];
    _DAT_1f800010 = param_4[4];
    _DAT_1f800014 = param_4[5];
    DAT_1f800018 = param_4[6];
    DAT_1f80001c = param_4[7];
    uVar1 = 0xffffffff;
    param_3 = 0xffffffff;
    DAT_1f80005c = unaff_s0;
    DAT_1f800060 = unaff_s1;
    _DAT_1f800064 = unaff_s2;
    _DAT_1f800068 = unaff_s3;
    DAT_1f80006c = unaff_s4;
    DAT_1f800070 = unaff_s5;
    DAT_1f800074 = unaff_s6;
    if (param_7 == (u_int *)0x0) {
      do {
        iVar2 = (int)*(u_int *)(iVar22 + 8) >> 0x10;
        if (iVar2 != -1) {
          puVar18 = (u_char *)(param_1 + iVar2 * 8);
          puVar4 = (u_char *)(param_1 + (*(u_int *)(iVar22 + 8) & 0xffff) * 8);
          setCopControlWord(2,0,_DAT_1f800000);
          setCopControlWord(2,0x800,_DAT_1f800004);
          setCopControlWord(2,0x1000,_DAT_1f800008);
          setCopControlWord(2,0x1800,_DAT_1f80000c);
          setCopControlWord(2,0x2000,_DAT_1f800010);
          setCopReg(2,0x4800,(u_int)*param_5);
          setCopReg(2,0x5000,(u_int)param_5[3]);
          setCopReg(2,0x5800,(u_int)param_5[6]);
          copFunction(2,0x49e012);
          uVar7 = getCopReg(2,0x4800);
          iVar10 = getCopReg(2,0x5000);
          uVar14 = getCopReg(2,0x5800);
          setCopReg(2,0x4800,(u_int)param_5[1]);
          setCopReg(2,0x5000,(u_int)param_5[4]);
          setCopReg(2,0x5800,(u_int)param_5[7]);
          copFunction(2,0x49e012);
          iVar2 = getCopReg(2,0x4800);
          uVar11 = getCopReg(2,0x5000);
          iVar15 = getCopReg(2,0x5800);
          DAT_1f800020 = uVar7 & 0xffff | iVar2 << 0x10;
          DAT_1f80002c = uVar14 & 0xffff | iVar15 << 0x10;
          setCopReg(2,0x4800,(u_int)param_5[2]);
          setCopReg(2,0x5000,(u_int)param_5[5]);
          setCopReg(2,0x5800,(u_int)param_5[8]);
          copFunction(2,0x49e012);
          uVar7 = getCopReg(2,0x4800);
          iVar2 = getCopReg(2,0x5000);
          uVar14 = getCopReg(2,0x5800);
          DAT_1f800024 = uVar7 & 0xffff | iVar10 << 0x10;
          DAT_1f800028 = uVar11 & 0xffff | iVar2 << 0x10;
          _DAT_1f800030 = _DAT_1f800030 & 0xffff0000 | uVar14 & 0xffff;
          setCopControlWord(2,0x2800,_DAT_1f800014);
          setCopControlWord(2,0x3000,DAT_1f800018);
          setCopControlWord(2,0x3800,DAT_1f80001c);
          setCopReg(2,0,CONCAT22(param_5[0xc],param_5[10]));
          setCopReg(2,uVar1,*(u_char *)(param_5 + 0xe));
          copFunction(2,0x480012);
          uVar8 = getCopReg(2,0x4800);
          uVar12 = getCopReg(2,0x5000);
          uVar16 = getCopReg(2,0x5800);
          setCopControlWord(2,0x2800,uVar8);
          setCopControlWord(2,0x3000,uVar12);
          setCopControlWord(2,0x3800,uVar16);
          setCopControlWord(2,0,DAT_1f800020);
          setCopControlWord(2,0x800,DAT_1f800024);
          setCopControlWord(2,0x1000,DAT_1f800028);
          setCopControlWord(2,0x1800,DAT_1f80002c);
          setCopControlWord(2,0x2000,_DAT_1f800030);
          uVar8 = *puVar4;
          uVar12 = puVar4[1];
          uVar16 = puVar4[2];
          uVar3 = puVar4[3];
          uVar13 = puVar4[4];
          uVar17 = puVar4[5];
          puVar9 = puVar4 + 4;
          puVar5 = param_2;
          while (puVar9 <= puVar18) {
            setCopReg(2,0,uVar8);
            setCopReg(2,0x800,uVar12);
            setCopReg(2,0x1000,uVar16);
            setCopReg(2,0x1800,uVar3);
            setCopReg(2,0x2000,uVar13);
            setCopReg(2,0x2800,uVar17);
            copFunction(2,0x280030);
            uVar8 = getCopReg(2,0xc);
            *puVar5 = uVar8;
            uVar8 = getCopReg(2,0x11);
            puVar5[1] = uVar8;
            uVar8 = getCopReg(2,0xd);
            puVar5[2] = uVar8;
            uVar1 = getCopControlWord(2,0xf800);
            uVar8 = getCopReg(2,0x12);
            puVar5[3] = uVar8;
            param_3 = param_3 & uVar1;
            uVar8 = getCopReg(2,0xe);
            puVar5[4] = uVar8;
            puVar9 = puVar4 + 10;
            uVar8 = getCopReg(2,0x13);
            puVar5[5] = uVar8;
            uVar8 = puVar4[6];
            uVar12 = puVar4[7];
            uVar16 = puVar4[8];
            uVar3 = puVar4[9];
            uVar13 = puVar4[10];
            uVar17 = puVar4[0xb];
            puVar5 = puVar5 + 6;
            puVar4 = puVar4 + 6;
          }
          uVar1 = (u_int)((int)puVar18 < (int)puVar4);
          param_2 = puVar5;
          if ((int)puVar18 >= (int)puVar4) {
            setCopReg(2,0,uVar8);
            setCopReg(2,0x800,uVar12);
            copFunction(2,0x180001);
            uVar8 = getCopReg(2,0xe);
            *puVar5 = uVar8;
            uVar8 = getCopReg(2,0x13);
            puVar5[1] = uVar8;
            uVar7 = getCopControlWord(2,0xf800);
            getCopReg(2,0x4000);
            param_2 = puVar5 + 2;
            uVar1 = (u_int)((int)puVar18 < (int)(puVar4 + 2));
            param_3 = param_3 & uVar7;
            if ((int)puVar18 >= (int)(puVar4 + 2)) {
              setCopReg(2,0,uVar16);
              setCopReg(2,0x800,uVar3);
              copFunction(2,0x180001);
              uVar8 = getCopReg(2,0xe);
              *param_2 = uVar8;
              uVar8 = getCopReg(2,0x13);
              puVar5[3] = uVar8;
              uVar7 = getCopControlWord(2,0xf800);
              getCopReg(2,0x4000);
              param_2 = puVar5 + 4;
              param_3 = param_3 & uVar7;
            }
          }
        }
        param_5 = param_5 + 0x10;
        iVar6 = iVar6 + -1;
        iVar22 = iVar22 + 0x18;
      } while (iVar6 != 0);
    }
    else {
      _DAT_1f800034 = *param_6;
      _DAT_1f800038 = param_6[1];
      DAT_1f80003c = param_6[2];
      DAT_1f800040 = param_6[3];
      _DAT_1f800044 = param_6[4];
      if (param_8 == (u_int *)0x0) {
        setCopReg(2,0x3000,0x34ffffff);
        do {
          iVar2 = (int)*(u_int *)(iVar22 + 8) >> 0x10;
          if (iVar2 != -1) {
            puVar18 = (u_char *)(param_1 + iVar2 * 8);
            puVar4 = (u_char *)(param_1 + (*(u_int *)(iVar22 + 8) & 0xffff) * 8);
            setCopControlWord(2,0,_DAT_1f800034);
            setCopControlWord(2,0x800,_DAT_1f800038);
            setCopControlWord(2,0x1000,DAT_1f80003c);
            setCopControlWord(2,0x1800,DAT_1f800040);
            setCopControlWord(2,0x2000,_DAT_1f800044);
            setCopReg(2,0x4800,(u_int)*param_5);
            setCopReg(2,0x5000,(u_int)param_5[3]);
            setCopReg(2,0x5800,(u_int)param_5[6]);
            copFunction(2,0x49e012);
            uVar7 = getCopReg(2,0x4800);
            iVar10 = getCopReg(2,0x5000);
            uVar14 = getCopReg(2,0x5800);
            setCopReg(2,0x4800,(u_int)param_5[1]);
            setCopReg(2,0x5000,(u_int)param_5[4]);
            setCopReg(2,0x5800,(u_int)param_5[7]);
            copFunction(2,0x49e012);
            iVar2 = getCopReg(2,0x4800);
            uVar11 = getCopReg(2,0x5000);
            iVar15 = getCopReg(2,0x5800);
            _DAT_1f800048 = uVar7 & 0xffff | iVar2 << 0x10;
            DAT_1f800054 = uVar14 & 0xffff | iVar15 << 0x10;
            setCopReg(2,0x4800,(u_int)param_5[2]);
            setCopReg(2,0x5000,(u_int)param_5[5]);
            setCopReg(2,0x5800,(u_int)param_5[8]);
            copFunction(2,0x49e012);
            uVar7 = getCopReg(2,0x4800);
            iVar2 = getCopReg(2,0x5000);
            uVar14 = getCopReg(2,0x5800);
            _DAT_1f80004c = uVar7 & 0xffff | iVar10 << 0x10;
            DAT_1f800050 = uVar11 & 0xffff | iVar2 << 0x10;
            DAT_1f800058 = DAT_1f800058 & 0xffff0000 | uVar14 & 0xffff;
            setCopControlWord(2,0x4000,_DAT_1f800048);
            setCopControlWord(2,0x4800,_DAT_1f80004c);
            setCopControlWord(2,0x5000,DAT_1f800050);
            setCopControlWord(2,0x5800,DAT_1f800054);
            setCopControlWord(2,0x6000,DAT_1f800058);
            setCopControlWord(2,0,_DAT_1f800000);
            setCopControlWord(2,0x800,_DAT_1f800004);
            setCopControlWord(2,0x1000,_DAT_1f800008);
            setCopControlWord(2,0x1800,_DAT_1f80000c);
            setCopControlWord(2,0x2000,_DAT_1f800010);
            setCopReg(2,0x4800,(u_int)*param_5);
            setCopReg(2,0x5000,(u_int)param_5[3]);
            setCopReg(2,0x5800,(u_int)param_5[6]);
            copFunction(2,0x49e012);
            uVar7 = getCopReg(2,0x4800);
            iVar10 = getCopReg(2,0x5000);
            uVar14 = getCopReg(2,0x5800);
            setCopReg(2,0x4800,(u_int)param_5[1]);
            setCopReg(2,0x5000,(u_int)param_5[4]);
            setCopReg(2,0x5800,(u_int)param_5[7]);
            copFunction(2,0x49e012);
            iVar2 = getCopReg(2,0x4800);
            uVar11 = getCopReg(2,0x5000);
            iVar15 = getCopReg(2,0x5800);
            DAT_1f800020 = uVar7 & 0xffff | iVar2 << 0x10;
            DAT_1f80002c = uVar14 & 0xffff | iVar15 << 0x10;
            setCopReg(2,0x4800,(u_int)param_5[2]);
            setCopReg(2,0x5000,(u_int)param_5[5]);
            setCopReg(2,0x5800,(u_int)param_5[8]);
            copFunction(2,0x49e012);
            uVar7 = getCopReg(2,0x4800);
            iVar2 = getCopReg(2,0x5000);
            uVar14 = getCopReg(2,0x5800);
            DAT_1f800024 = uVar7 & 0xffff | iVar10 << 0x10;
            DAT_1f800028 = uVar11 & 0xffff | iVar2 << 0x10;
            _DAT_1f800030 = _DAT_1f800030 & 0xffff0000 | uVar14 & 0xffff;
            setCopControlWord(2,0x2800,_DAT_1f800014);
            setCopControlWord(2,0x3000,DAT_1f800018);
            setCopControlWord(2,0x3800,DAT_1f80001c);
            setCopReg(2,0,CONCAT22(param_5[0xc],param_5[10]));
            setCopReg(2,uVar1,*(u_char *)(param_5 + 0xe));
            copFunction(2,0x480012);
            uVar8 = getCopReg(2,0x4800);
            uVar12 = getCopReg(2,0x5000);
            uVar16 = getCopReg(2,0x5800);
            setCopControlWord(2,0x2800,uVar8);
            setCopControlWord(2,0x3000,uVar12);
            setCopControlWord(2,0x3800,uVar16);
            setCopControlWord(2,0,DAT_1f800020);
            setCopControlWord(2,0x800,DAT_1f800024);
            setCopControlWord(2,0x1000,DAT_1f800028);
            setCopControlWord(2,0x1800,DAT_1f80002c);
            setCopControlWord(2,0x2000,_DAT_1f800030);
            uVar8 = *puVar4;
            uVar7 = puVar4[1];
            uVar12 = puVar4[2];
            uVar11 = puVar4[3];
            uVar16 = puVar4[4];
            uVar1 = puVar4[5];
            puVar9 = puVar4 + 4;
            puVar5 = param_2;
            puVar20 = param_7;
            while (puVar9 <= puVar18) {
              setCopReg(2,0,uVar8);
              setCopReg(2,0x800,uVar7);
              setCopReg(2,0x1000,uVar12);
              setCopReg(2,0x1800,uVar11);
              setCopReg(2,0x2000,uVar16);
              setCopReg(2,0x2800,uVar1);
              copFunction(2,0x280030);
              uVar12 = *(u_char *)(&gNormalList + (uVar7 >> 0x10));
              uVar16 = *(u_char *)&(&gNormalList)[uVar7 >> 0x10].z;
              uVar13 = *(u_char *)(&gNormalList + (uVar11 >> 0x10));
              uVar17 = *(u_char *)&(&gNormalList)[uVar11 >> 0x10].z;
              uVar3 = *(u_char *)(&gNormalList + (uVar1 >> 0x10));
              uVar19 = *(u_char *)&(&gNormalList)[uVar1 >> 0x10].z;
              uVar8 = getCopReg(2,0xc);
              *puVar5 = uVar8;
              uVar8 = getCopReg(2,0x11);
              puVar5[1] = uVar8;
              uVar8 = getCopReg(2,0xd);
              puVar5[2] = uVar8;
              uVar1 = getCopControlWord(2,0xf800);
              uVar8 = getCopReg(2,0x12);
              puVar5[3] = uVar8;
              param_3 = param_3 & uVar1;
              uVar8 = getCopReg(2,0xe);
              puVar5[4] = uVar8;
              uVar8 = getCopReg(2,0x13);
              puVar5[5] = uVar8;
              iVar2 = getCopReg(2,0x4000);
              if (modelFadeValue != 0) {
                setCopReg(2,0x4000,modelFadeValue);
                iVar2 = modelFadeValue;
              }
              setCopReg(2,0,uVar12);
              setCopReg(2,0x800,uVar16);
              setCopReg(2,0x1000,uVar13);
              setCopReg(2,0x1800,uVar17);
              setCopReg(2,0x2000,uVar3);
              setCopReg(2,0x2800,uVar19);
              if (iVar2 == 0) {
                copFunction(2,0xd80420);
              }
              else {
                copFunction(2,0xf80416);
              }
              puVar9 = puVar4 + 10;
              uVar8 = puVar4[6];
              uVar7 = puVar4[7];
              uVar12 = puVar4[8];
              uVar11 = puVar4[9];
              uVar16 = puVar4[10];
              uVar1 = puVar4[0xb];
              uVar14 = getCopReg(2,0x14);
              *puVar20 = uVar14;
              uVar14 = getCopReg(2,0x15);
              puVar20[1] = uVar14;
              uVar14 = getCopReg(2,0x16);
              puVar20[2] = uVar14;
              puVar20 = puVar20 + 3;
              puVar5 = puVar5 + 6;
              puVar4 = puVar4 + 6;
            }
            uVar1 = (u_int)((int)puVar18 < (int)puVar4);
            param_2 = puVar5;
            param_7 = puVar20;
            if ((int)puVar18 >= (int)puVar4) {
              setCopReg(2,0,uVar8);
              setCopReg(2,0x800,uVar7);
              copFunction(2,0x180001);
              uVar16 = *(u_char *)(&gNormalList + (uVar7 >> 0x10));
              uVar3 = *(u_char *)&(&gNormalList)[uVar7 >> 0x10].z;
              uVar8 = getCopReg(2,0xe);
              *puVar5 = uVar8;
              uVar8 = getCopReg(2,0x13);
              puVar5[1] = uVar8;
              uVar7 = getCopControlWord(2,0xf800);
              iVar2 = getCopReg(2,0x4000);
              if (modelFadeValue != 0) {
                setCopReg(2,0x4000,modelFadeValue);
                iVar2 = modelFadeValue;
              }
              setCopReg(2,0,uVar16);
              setCopReg(2,0x800,uVar3);
              if (iVar2 == 0) {
                copFunction(2,0xc8041e);
              }
              else {
                copFunction(2,0xe80413);
              }
              param_2 = puVar5 + 2;
              uVar1 = getCopReg(2,0x16);
              *puVar20 = uVar1;
              param_7 = puVar20 + 1;
              uVar1 = (u_int)((int)puVar18 < (int)(puVar4 + 2));
              param_3 = param_3 & uVar7;
              if ((int)puVar18 >= (int)(puVar4 + 2)) {
                setCopReg(2,0,uVar12);
                setCopReg(2,0x800,uVar11);
                copFunction(2,0x180001);
                uVar12 = *(u_char *)(&gNormalList + (uVar11 >> 0x10));
                uVar16 = *(u_char *)&(&gNormalList)[uVar11 >> 0x10].z;
                uVar8 = getCopReg(2,0xe);
                *param_2 = uVar8;
                uVar8 = getCopReg(2,0x13);
                puVar5[3] = uVar8;
                uVar7 = getCopControlWord(2,0xf800);
                iVar2 = getCopReg(2,0x4000);
                if (modelFadeValue != 0) {
                  setCopReg(2,0x4000,modelFadeValue);
                  iVar2 = modelFadeValue;
                }
                setCopReg(2,0,uVar12);
                setCopReg(2,0x800,uVar16);
                if (iVar2 == 0) {
                  copFunction(2,0xc8041e);
                }
                else {
                  copFunction(2,0xe80413);
                }
                param_2 = puVar5 + 4;
                param_3 = param_3 & uVar7;
                uVar7 = getCopReg(2,0x16);
                *param_7 = uVar7;
                param_7 = puVar20 + 2;
              }
            }
          }
          param_5 = param_5 + 0x10;
          iVar6 = iVar6 + -1;
          iVar22 = iVar22 + 0x18;
        } while (iVar6 != 0);
      }
      else {
        param_3 = 0xffffffff;
        uVar1 = 0xffffffff;
        setCopReg(2,0x3000,0x34ffffff);
        do {
          iVar2 = (int)*(u_int *)(iVar22 + 8) >> 0x10;
          if (iVar2 != -1) {
            puVar18 = (u_char *)(param_1 + iVar2 * 8);
            puVar4 = (u_char *)(param_1 + (*(u_int *)(iVar22 + 8) & 0xffff) * 8);
            setCopControlWord(2,0,_DAT_1f800034);
            setCopControlWord(2,0x800,_DAT_1f800038);
            setCopControlWord(2,0x1000,DAT_1f80003c);
            setCopControlWord(2,0x1800,DAT_1f800040);
            setCopControlWord(2,0x2000,_DAT_1f800044);
            setCopReg(2,0x4800,(u_int)*param_5);
            setCopReg(2,0x5000,(u_int)param_5[3]);
            setCopReg(2,0x5800,(u_int)param_5[6]);
            copFunction(2,0x49e012);
            uVar7 = getCopReg(2,0x4800);
            iVar10 = getCopReg(2,0x5000);
            uVar14 = getCopReg(2,0x5800);
            setCopReg(2,0x4800,(u_int)param_5[1]);
            setCopReg(2,0x5000,(u_int)param_5[4]);
            setCopReg(2,0x5800,(u_int)param_5[7]);
            copFunction(2,0x49e012);
            iVar2 = getCopReg(2,0x4800);
            uVar11 = getCopReg(2,0x5000);
            iVar15 = getCopReg(2,0x5800);
            _DAT_1f800048 = uVar7 & 0xffff | iVar2 << 0x10;
            DAT_1f800054 = uVar14 & 0xffff | iVar15 << 0x10;
            setCopReg(2,0x4800,(u_int)param_5[2]);
            setCopReg(2,0x5000,(u_int)param_5[5]);
            setCopReg(2,0x5800,(u_int)param_5[8]);
            copFunction(2,0x49e012);
            uVar7 = getCopReg(2,0x4800);
            iVar2 = getCopReg(2,0x5000);
            uVar14 = getCopReg(2,0x5800);
            _DAT_1f80004c = uVar7 & 0xffff | iVar10 << 0x10;
            DAT_1f800050 = uVar11 & 0xffff | iVar2 << 0x10;
            DAT_1f800058 = DAT_1f800058 & 0xffff0000 | uVar14 & 0xffff;
            setCopControlWord(2,0x4000,_DAT_1f800048);
            setCopControlWord(2,0x4800,_DAT_1f80004c);
            setCopControlWord(2,0x5000,DAT_1f800050);
            setCopControlWord(2,0x5800,DAT_1f800054);
            setCopControlWord(2,0x6000,DAT_1f800058);
            setCopControlWord(2,0,_DAT_1f800000);
            setCopControlWord(2,0x800,_DAT_1f800004);
            setCopControlWord(2,0x1000,_DAT_1f800008);
            setCopControlWord(2,0x1800,_DAT_1f80000c);
            setCopControlWord(2,0x2000,_DAT_1f800010);
            setCopReg(2,0x4800,(u_int)*param_5);
            setCopReg(2,0x5000,(u_int)param_5[3]);
            setCopReg(2,0x5800,(u_int)param_5[6]);
            copFunction(2,0x49e012);
            uVar7 = getCopReg(2,0x4800);
            iVar10 = getCopReg(2,0x5000);
            uVar14 = getCopReg(2,0x5800);
            setCopReg(2,0x4800,(u_int)param_5[1]);
            setCopReg(2,0x5000,(u_int)param_5[4]);
            setCopReg(2,0x5800,(u_int)param_5[7]);
            copFunction(2,0x49e012);
            iVar2 = getCopReg(2,0x4800);
            uVar11 = getCopReg(2,0x5000);
            iVar15 = getCopReg(2,0x5800);
            DAT_1f800020 = uVar7 & 0xffff | iVar2 << 0x10;
            DAT_1f80002c = uVar14 & 0xffff | iVar15 << 0x10;
            setCopReg(2,0x4800,(u_int)param_5[2]);
            setCopReg(2,0x5000,(u_int)param_5[5]);
            setCopReg(2,0x5800,(u_int)param_5[8]);
            copFunction(2,0x49e012);
            uVar7 = getCopReg(2,0x4800);
            iVar2 = getCopReg(2,0x5000);
            uVar14 = getCopReg(2,0x5800);
            DAT_1f800024 = uVar7 & 0xffff | iVar10 << 0x10;
            DAT_1f800028 = uVar11 & 0xffff | iVar2 << 0x10;
            _DAT_1f800030 = _DAT_1f800030 & 0xffff0000 | uVar14 & 0xffff;
            setCopControlWord(2,0x2800,_DAT_1f800014);
            setCopControlWord(2,0x3000,DAT_1f800018);
            setCopControlWord(2,0x3800,DAT_1f80001c);
            setCopReg(2,0,CONCAT22(param_5[0xc],param_5[10]));
            setCopReg(2,uVar1,*(u_char *)(param_5 + 0xe));
            copFunction(2,0x480012);
            uVar8 = getCopReg(2,0x4800);
            uVar12 = getCopReg(2,0x5000);
            uVar16 = getCopReg(2,0x5800);
            setCopControlWord(2,0x2800,uVar8);
            setCopControlWord(2,0x3000,uVar12);
            setCopControlWord(2,0x3800,uVar16);
            setCopControlWord(2,0,DAT_1f800020);
            setCopControlWord(2,0x800,DAT_1f800024);
            setCopControlWord(2,0x1000,DAT_1f800028);
            setCopControlWord(2,0x1800,DAT_1f80002c);
            setCopControlWord(2,0x2000,_DAT_1f800030);
            uVar8 = *puVar4;
            uVar7 = puVar4[1];
            uVar12 = puVar4[2];
            uVar11 = puVar4[3];
            uVar16 = puVar4[4];
            uVar1 = puVar4[5];
            puVar9 = puVar4 + 4;
            puVar5 = param_2;
            puVar20 = param_7;
            puVar21 = param_8;
            while (puVar9 <= puVar18) {
              setCopReg(2,0,uVar8);
              setCopReg(2,0x800,uVar7);
              setCopReg(2,0x1000,uVar12);
              setCopReg(2,0x1800,uVar11);
              setCopReg(2,0x2000,uVar16);
              setCopReg(2,0x2800,uVar1);
              copFunction(2,0x280030);
              uVar12 = *(u_char *)(&gNormalList + (uVar7 >> 0x10));
              uVar16 = *(u_char *)&(&gNormalList)[uVar7 >> 0x10].z;
              uVar14 = *puVar21;
              uVar8 = getCopReg(2,0xc);
              *puVar5 = uVar8;
              uVar8 = getCopReg(2,0x11);
              puVar5[1] = uVar8;
              uVar8 = getCopReg(2,0xd);
              puVar5[2] = uVar8;
              uVar7 = getCopControlWord(2,0xf800);
              uVar8 = getCopReg(2,0x12);
              puVar5[3] = uVar8;
              param_3 = param_3 & uVar7;
              uVar8 = getCopReg(2,0xe);
              puVar5[4] = uVar8;
              uVar8 = getCopReg(2,0x13);
              puVar5[5] = uVar8;
              iVar2 = getCopReg(2,0x4000);
              if (modelFadeValue != 0) {
                setCopReg(2,0x4000,modelFadeValue);
                iVar2 = modelFadeValue;
              }
              if ((uVar14 & 0x40000000) == 0) {
                setCopReg(2,0,uVar12);
                setCopReg(2,0x800,uVar16);
                setCopReg(2,0x3000,uVar14);
                if (iVar2 == 0) {
                  copFunction(2,0x108041b);
                }
                else {
                  copFunction(2,0xe80413);
                }
                uVar14 = getCopReg(2,0xb000);
              }
              *puVar20 = uVar14;
              uVar7 = puVar21[1];
              if ((uVar7 & 0x40000000) == 0) {
                setCopReg(2,0,*(u_char *)(&gNormalList + (uVar11 >> 0x10)));
                setCopReg(2,0x800,*(u_char *)&(&gNormalList)[uVar11 >> 0x10].z);
                setCopReg(2,0x3000,uVar7);
                if (iVar2 == 0) {
                  copFunction(2,0x108041b);
                }
                else {
                  copFunction(2,0xe80413);
                }
                uVar7 = getCopReg(2,0xb000);
              }
              puVar20[1] = uVar7;
              uVar7 = puVar21[2];
              if ((uVar7 & 0x40000000) == 0) {
                setCopReg(2,0,*(u_char *)(&gNormalList + (uVar1 >> 0x10)));
                setCopReg(2,0x800,*(u_char *)&(&gNormalList)[uVar1 >> 0x10].z);
                setCopReg(2,0x3000,uVar7);
                if (iVar2 == 0) {
                  copFunction(2,0x108041b);
                }
                else {
                  copFunction(2,0xe80413);
                }
                uVar7 = getCopReg(2,0xb000);
              }
              puVar20[2] = uVar7;
              puVar9 = puVar4 + 10;
              uVar8 = puVar4[6];
              uVar7 = puVar4[7];
              uVar12 = puVar4[8];
              uVar11 = puVar4[9];
              uVar16 = puVar4[10];
              uVar1 = puVar4[0xb];
              puVar20 = puVar20 + 3;
              puVar21 = puVar21 + 3;
              puVar5 = puVar5 + 6;
              puVar4 = puVar4 + 6;
            }
            uVar1 = (u_int)((int)puVar18 < (int)puVar4);
            param_2 = puVar5;
            param_7 = puVar20;
            param_8 = puVar21;
            if ((int)puVar18 >= (int)puVar4) {
              setCopReg(2,0,uVar8);
              setCopReg(2,0x800,uVar7);
              copFunction(2,0x180001);
              uVar16 = *(u_char *)(&gNormalList + (uVar7 >> 0x10));
              uVar3 = *(u_char *)&(&gNormalList)[uVar7 >> 0x10].z;
              uVar1 = *puVar21;
              uVar8 = getCopReg(2,0xe);
              *puVar5 = uVar8;
              uVar8 = getCopReg(2,0x13);
              puVar5[1] = uVar8;
              uVar7 = getCopControlWord(2,0xf800);
              iVar2 = getCopReg(2,0x4000);
              if (modelFadeValue != 0) {
                setCopReg(2,0x4000,modelFadeValue);
                iVar2 = modelFadeValue;
              }
              if ((uVar1 & 0x40000000) == 0) {
                setCopReg(2,0,uVar16);
                setCopReg(2,0x800,uVar3);
                setCopReg(2,0x3000,uVar1);
                if (iVar2 == 0) {
                  copFunction(2,0x108041b);
                }
                else {
                  copFunction(2,0xe80413);
                }
                uVar1 = getCopReg(2,0xb000);
              }
              *puVar20 = uVar1;
              param_2 = puVar5 + 2;
              param_8 = puVar21 + 1;
              param_7 = puVar20 + 1;
              uVar1 = (u_int)((int)puVar18 < (int)(puVar4 + 2));
              param_3 = param_3 & uVar7;
              if ((int)puVar18 >= (int)(puVar4 + 2)) {
                setCopReg(2,0,uVar12);
                setCopReg(2,0x800,uVar11);
                copFunction(2,0x180001);
                uVar12 = *(u_char *)(&gNormalList + (uVar11 >> 0x10));
                uVar16 = *(u_char *)&(&gNormalList)[uVar11 >> 0x10].z;
                uVar11 = *param_8;
                uVar8 = getCopReg(2,0xe);
                *param_2 = uVar8;
                uVar8 = getCopReg(2,0x13);
                puVar5[3] = uVar8;
                uVar7 = getCopControlWord(2,0xf800);
                uVar1 = 0x40000000;
                if ((uVar11 & 0x40000000) == 0) {
                  setCopReg(2,0,uVar12);
                  setCopReg(2,0x800,uVar16);
                  setCopReg(2,0x3000,uVar11);
                  if (iVar2 == 0) {
                    copFunction(2,0x108041b);
                  }
                  else {
                    copFunction(2,0xe80413);
                  }
                  uVar11 = getCopReg(2,0xb000);
                }
                *param_7 = uVar11;
                param_2 = puVar5 + 4;
                param_8 = puVar21 + 2;
                param_3 = param_3 & uVar7;
                param_7 = puVar20 + 2;
              }
            }
          }
          param_5 = param_5 + 0x10;
          iVar6 = iVar6 + -1;
          iVar22 = iVar22 + 0x18;
        } while (iVar6 != 0);
      }
    }
  }
  return param_3;
}






 

		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	

void DRAW_MFace3_S(u_char param_1,u_char param_2)

{
  char cVar1;
  byte bVar2;
  u_char in_zero;
  u_char in_at;
  u_int in_v0;
  u_int in_v1;
  u_int uVar3;
  int iVar4;
  u_char uVar5;
  u_char uVar6;
  int iVar7;
  u_int uVar8;
  u_int uVar9;
  u_int uVar10;
  u_int uVar11;
  u_int uVar12;
  u_char uVar13;
  int iVar14;
  u_int *unaff_s0;
  u_int *puVar15;
  int unaff_s1;
  int unaff_s3;
  u_int *unaff_s5;
  u_int *unaff_s6;
  u_int *unaff_s7;
  int unaff_s8;
  
  uVar3 = getCopControlWord(2,0xf800);
  if ((uVar3 & 0x60000) != 0) {
    return;
  }
  copFunction(2,0x1400006);
  iVar4 = getCopReg(2,0xc000);
  if (-1 < iVar4) {
    return;
  }
  if ((in_v0 & 4) == 0) {
    iVar14 = getCopReg(2,0x8800);
    iVar4 = getCopReg(2,0x9000);
    iVar7 = getCopReg(2,0x9800);
    if (iVar4 <= iVar14) {
      iVar4 = iVar14;
    }
    iVar14 = iVar7 >> 2;
    if (iVar7 <= iVar4) {
      iVar14 = iVar4 >> 2;
    }
  }
  else {
    copFunction(2,0x158002d);
    iVar14 = getCopReg(2,0x3800);
  }
  if ((in_v0 & 2) != 0) {
    iVar14 = iVar14 + (int)*(char *)(in_v1 + 0xb) * 2;
  }
  iVar4 = iVar14 * 4 + *(int *)(unaff_s8 + 0x8c);
  if (iVar4 < 1) {
    return;
  }
  if (0x2fff < iVar4) {
    return;
  }
  bVar2 = (byte)unaff_s3;
  if ((in_v0 & 1) == 0) {
    if ((in_v0 & 2) == 0) {
      uVar3 = getCopReg(2,0xc);
      unaff_s0[2] = uVar3;
      uVar3 = getCopReg(2,0xd);
      unaff_s0[3] = uVar3;
      uVar3 = getCopReg(2,0xe);
      unaff_s0[4] = uVar3;
      if ((in_v0 & 8) != 0) {
        unaff_s0[1] = in_v1;
        *(byte *)((int)unaff_s0 + 7) = *(byte *)((int)unaff_s0 + 7) | bVar2;
        *unaff_s0 = *(u_int *)(iVar4 + unaff_s1);
        *(undefined *)((int)unaff_s0 + 3) = 4;
        *(u_int *)(iVar4 + unaff_s1) = (u_int)unaff_s0 & 0xffffff;
        return;
      }
      setCopReg(2,in_zero,**(u_char **)(unaff_s8 + 0x4c));
      setCopReg(2,in_at,(*(u_char **)(unaff_s8 + 0x4c))[1]);
      setCopReg(2,0x3000,in_v1);
      copFunction(2,0xe80413);
      *unaff_s0 = *(u_int *)(iVar4 + unaff_s1);
      *(undefined *)((int)unaff_s0 + 3) = 4;
      *(u_int *)(iVar4 + unaff_s1) = (u_int)unaff_s0 & 0xffffff;
      uVar3 = getCopReg(2,0x16);
      unaff_s0[1] = uVar3;
      *(byte *)((int)unaff_s0 + 7) = *(byte *)((int)unaff_s0 + 7) | bVar2;
      return;
    }
    uVar3 = getCopReg(2,0xc);
    unaff_s0[2] = uVar3;
    uVar3 = getCopReg(2,0xd);
    unaff_s0[4] = uVar3;
    uVar3 = getCopReg(2,0xe);
    unaff_s0[6] = uVar3;
    iVar14 = getCopReg(2,0x4000);
    if (iVar14 == 0) {
      if ((in_v0 & 8) != 0) {
        unaff_s0[1] = *(u_int *)(in_v1 + 0xc);
        uVar3 = *unaff_s6;
        uVar8 = *unaff_s7;
        unaff_s0[3] = *unaff_s5;
        unaff_s0[5] = uVar3;
        unaff_s0[7] = uVar8;
        *(byte *)((int)unaff_s0 + 7) = *(byte *)((int)unaff_s0 + 7) | bVar2;
        *unaff_s0 = *(u_int *)(iVar4 + unaff_s1);
        *(undefined *)((int)unaff_s0 + 3) = 7;
        *(u_int *)(iVar4 + unaff_s1) = (u_int)unaff_s0 & 0xffffff;
        return;
      }
      setCopReg(2,in_zero,**(u_char **)(unaff_s8 + 0x4c));
      setCopReg(2,in_at,(*(u_char **)(unaff_s8 + 0x4c))[1]);
      setCopReg(2,0x3000,*(u_char *)(in_v1 + 0xc));
      copFunction(2,0xe80413);
      uVar3 = *unaff_s6;
      uVar8 = *unaff_s7;
      unaff_s0[3] = *unaff_s5;
      unaff_s0[5] = uVar3;
      unaff_s0[7] = uVar8;
      *unaff_s0 = *(u_int *)(iVar4 + unaff_s1);
      *(undefined *)((int)unaff_s0 + 3) = 7;
      *(u_int *)(iVar4 + unaff_s1) = (u_int)unaff_s0 & 0xffffff;
      uVar3 = getCopReg(2,0x16);
      unaff_s0[1] = uVar3;
      *(byte *)((int)unaff_s0 + 7) = *(byte *)((int)unaff_s0 + 7) | bVar2;
      return;
    }
    setCopReg(2,in_zero,**(u_char **)(unaff_s8 + 0x4c));
    setCopReg(2,in_at,(*(u_char **)(unaff_s8 + 0x4c))[1]);
    setCopReg(2,0x3000,*(u_int *)(in_v1 + 0xc) & 0xefffffff | 0x2000000);
    copFunction(2,0xe80413);
    uVar3 = *unaff_s6;
    uVar8 = *unaff_s7;
    unaff_s0[3] = *unaff_s5;
    unaff_s0[5] = uVar3 | 0x200000;
    unaff_s0[7] = uVar8;
    *unaff_s0 = *(u_int *)(iVar4 + unaff_s1);
    *(undefined *)((int)unaff_s0 + 3) = 7;
    *(u_int *)(iVar4 + unaff_s1) = (u_int)unaff_s0 & 0xffffff;
    uVar3 = getCopReg(2,0x16);
    unaff_s0[1] = uVar3;
    *(byte *)((int)unaff_s0 + 7) = *(byte *)((int)unaff_s0 + 7) | bVar2;
    puVar15 = unaff_s0 + 8;
DRAW_MFace3_fog_backface:
    uVar3 = depthQBackColor;
    setCopReg(2,0x3000,depthQBackColor);
    copFunction(2,0x780010);
    *puVar15 = *(u_int *)(iVar4 + unaff_s1);
    *(undefined *)((int)puVar15 + 3) = 6;
    *(u_int *)(iVar4 + unaff_s1) = (u_int)puVar15 & 0xffffff;
    iVar4 = getCopReg(2,0xb000);
    uVar3 = (uVar3 | 0x30000000) - iVar4;
    puVar15[1] = uVar3;
    puVar15[3] = uVar3;
    puVar15[5] = uVar3;
    uVar3 = getCopReg(2,0xc);
    puVar15[2] = uVar3;
    uVar3 = getCopReg(2,0xd);
    puVar15[4] = uVar3;
    uVar3 = getCopReg(2,0xe);
    puVar15[6] = uVar3;
    return;
  }
  iVar14 = getCopReg(2,0x4000);
  if ((in_v0 & 2) == 0) {
    if (iVar14 != 0) {
      uVar5 = getCopControlWord(2,0xa800);
      uVar6 = getCopControlWord(2,0xb000);
      uVar13 = getCopControlWord(2,0xb800);
      *(u_char *)(unaff_s8 + 0x70) = uVar5;
      *(u_char *)(unaff_s8 + 0x74) = uVar6;
      *(u_char *)(unaff_s8 + 0x78) = uVar13;
      setCopControlWord(2,0xa800,(int)*(char *)(unaff_s8 + 0x7c) << 4);
      setCopControlWord(2,0xb000,(int)*(char *)(unaff_s8 + 0x7d) << 4);
      setCopControlWord(2,0xb800,(int)*(char *)(unaff_s8 + 0x7e) << 4);
      setCopReg(2,in_zero,**(u_char **)(unaff_s8 + 0x4c));
      setCopReg(2,in_at,(*(u_char **)(unaff_s8 + 0x4c))[1]);
      setCopReg(2,in_v0,**(u_char **)(unaff_s8 + 0x50));
      setCopReg(2,in_v1,(*(u_char **)(unaff_s8 + 0x50))[1]);
      setCopReg(2,param_1,**(u_char **)(unaff_s8 + 0x54));
      setCopReg(2,param_2,(*(u_char **)(unaff_s8 + 0x54))[1]);
      setCopReg(2,0x3000,in_v1);
      copFunction(2,0xf80416);
      *unaff_s0 = *(u_int *)(iVar4 + unaff_s1);
      *(undefined *)((int)unaff_s0 + 3) = 6;
      *(u_int *)(iVar4 + unaff_s1) = (u_int)unaff_s0 & 0xffffff;
      uVar5 = *(u_char *)(unaff_s8 + 0x70);
      uVar6 = *(u_char *)(unaff_s8 + 0x74);
      uVar13 = *(u_char *)(unaff_s8 + 0x78);
      uVar3 = getCopReg(2,0x14);
      unaff_s0[1] = uVar3;
      uVar3 = getCopReg(2,0x15);
      unaff_s0[3] = uVar3;
      uVar3 = getCopReg(2,0x16);
      unaff_s0[5] = uVar3;
      *(byte *)((int)unaff_s0 + 7) = *(byte *)((int)unaff_s0 + 7) | bVar2;
      setCopControlWord(2,0xa800,uVar5);
      setCopControlWord(2,0xb000,uVar6);
      setCopControlWord(2,0xb800,uVar13);
      return;
    }
    if (unaff_s3 != 0) {
      unaff_s0[1] = 0xe1000268;
      uVar3 = getCopReg(2,0xc);
      unaff_s0[3] = uVar3;
      uVar3 = getCopReg(2,0xd);
      unaff_s0[5] = uVar3;
      uVar3 = getCopReg(2,0xe);
      unaff_s0[7] = uVar3;
      setCopReg(2,in_zero,**(u_char **)(unaff_s8 + 0x4c));
      setCopReg(2,in_at,(*(u_char **)(unaff_s8 + 0x4c))[1]);
      setCopReg(2,in_v0,**(u_char **)(unaff_s8 + 0x50));
      setCopReg(2,in_v1,(*(u_char **)(unaff_s8 + 0x50))[1]);
      setCopReg(2,param_1,**(u_char **)(unaff_s8 + 0x54));
      setCopReg(2,param_2,(*(u_char **)(unaff_s8 + 0x54))[1]);
      setCopReg(2,0x3000,in_v1);
      copFunction(2,0xf80416);
      *unaff_s0 = *(u_int *)(iVar4 + unaff_s1);
      *(undefined *)((int)unaff_s0 + 3) = 7;
      *(u_int *)(iVar4 + unaff_s1) = (u_int)unaff_s0 & 0xffffff;
      uVar3 = getCopReg(2,0x14);
      unaff_s0[2] = uVar3;
      uVar3 = getCopReg(2,0x15);
      unaff_s0[4] = uVar3;
      uVar3 = getCopReg(2,0x16);
      unaff_s0[6] = uVar3;
      *(byte *)((int)unaff_s0 + 0xb) = *(byte *)((int)unaff_s0 + 0xb) | bVar2;
      return;
    }
    uVar3 = getCopReg(2,0xc);
    unaff_s0[2] = uVar3;
    uVar3 = getCopReg(2,0xd);
    unaff_s0[4] = uVar3;
    uVar3 = getCopReg(2,0xe);
    unaff_s0[6] = uVar3;
    setCopReg(2,in_zero,**(u_char **)(unaff_s8 + 0x4c));
    setCopReg(2,in_at,(*(u_char **)(unaff_s8 + 0x4c))[1]);
    setCopReg(2,in_v0,**(u_char **)(unaff_s8 + 0x50));
    setCopReg(2,in_v1,(*(u_char **)(unaff_s8 + 0x50))[1]);
    setCopReg(2,param_1,**(u_char **)(unaff_s8 + 0x54));
    setCopReg(2,param_2,(*(u_char **)(unaff_s8 + 0x54))[1]);
    setCopReg(2,0x3000,in_v1);
    copFunction(2,0xf80416);
    *unaff_s0 = *(u_int *)(iVar4 + unaff_s1);
    *(undefined *)((int)unaff_s0 + 3) = 6;
    *(u_int *)(iVar4 + unaff_s1) = (u_int)unaff_s0 & 0xffffff;
    uVar3 = getCopReg(2,0x14);
    unaff_s0[1] = uVar3;
    uVar3 = getCopReg(2,0x15);
    unaff_s0[3] = uVar3;
    uVar3 = getCopReg(2,0x16);
    unaff_s0[5] = uVar3;
    *(undefined *)((int)unaff_s0 + 7) = *(undefined *)((int)unaff_s0 + 7);
    return;
  }
  uVar3 = getCopReg(2,0xc);
  unaff_s0[2] = uVar3;
  uVar3 = getCopReg(2,0xd);
  unaff_s0[5] = uVar3;
  uVar3 = getCopReg(2,0xe);
  unaff_s0[8] = uVar3;
  iVar14 = getCopReg(2,0x4000);
  if (iVar14 != 0) {
    uVar3 = *(u_int *)(unaff_s8 + 0x50);
    uVar8 = *(u_int *)(unaff_s8 + 0x54);
    unaff_s0[1] = *(u_int *)(unaff_s8 + 0x4c) & 0xffffff | 0x36000000;
    unaff_s0[4] = uVar3 & 0xffffff | 0x36000000;
    unaff_s0[7] = uVar8 & 0xffffff | 0x36000000;
    uVar3 = *unaff_s6;
    uVar8 = *unaff_s7;
    unaff_s0[3] = *unaff_s5;
    unaff_s0[6] = uVar3 | 0x200000;
    unaff_s0[9] = uVar8;
    *unaff_s0 = *(u_int *)(iVar4 + unaff_s1);
    *(undefined *)((int)unaff_s0 + 3) = 9;
    *(u_int *)(iVar4 + unaff_s1) = (u_int)unaff_s0 & 0xffffff;
    uVar3 = getCopReg(2,0xc);
    unaff_s0[2] = uVar3;
    uVar3 = getCopReg(2,0xd);
    unaff_s0[5] = uVar3;
    uVar3 = getCopReg(2,0xe);
    unaff_s0[8] = uVar3;
    puVar15 = unaff_s0 + 10;
    goto DRAW_MFace3_fog_backface;
  }
  uVar3 = *(u_int *)(unaff_s8 + 0x50);
  uVar8 = *(u_int *)(unaff_s8 + 0x54);
  unaff_s0[1] = *(u_int *)(unaff_s8 + 0x4c) & 0x2ffffff | 0x34000000;
  unaff_s0[4] = uVar3 & 0x2ffffff | 0x34000000;
  unaff_s0[7] = uVar8 & 0x2ffffff | 0x34000000;
  uVar3 = *unaff_s6;
  uVar8 = *unaff_s7;
  if (*(int *)(unaff_s8 + 0x80) != 0) {
    uVar3 = uVar3 & 0xffff | (uVar3 >> 0x10 & 0xff9f | 0x20) << 0x10;
  }
  unaff_s0[3] = *unaff_s5;
  unaff_s0[6] = uVar3;
  unaff_s0[9] = uVar8;
  *(byte *)((int)unaff_s0 + 7) = *(byte *)((int)unaff_s0 + 7) | bVar2;
  *unaff_s0 = *(u_int *)(iVar4 + unaff_s1);
  *(undefined *)((int)unaff_s0 + 3) = 9;
  *(u_int *)(iVar4 + unaff_s1) = (u_int)unaff_s0 & 0xffffff;
  if (*(int *)(unaff_s8 + 0x80) == 0) {
    return;
  }
  setCopReg(2,0x4000,*(int *)(unaff_s8 + 0x80));
  uVar3 = getCopReg(2,0x6000);
  uVar9 = getCopReg(2,0x6800);
  uVar11 = getCopReg(2,0x7000);
  setCopReg(2,0x3000,0x808080);
  unaff_s0[0xc] = uVar3;
  unaff_s0[0xe] = uVar9;
  unaff_s0[0x10] = uVar11;
  copFunction(2,0x780010);
  *(undefined *)((int)unaff_s0 + 0x35) = (char)(uVar3 >> 0x10);
  *(undefined *)((int)unaff_s0 + 0x3d) = (char)(uVar9 >> 0x10);
  *(undefined *)((int)unaff_s0 + 0x45) = (char)(uVar11 >> 0x10);
  uVar8 = uVar3 & 0xffff;
  uVar10 = uVar9 & 0xffff;
  uVar12 = uVar11 & 0xffff;
  if (uVar10 < uVar8) {
    if (uVar10 <= uVar12) {
      uVar3 = uVar9 & 0xffc0;
      goto DMF_faded_tpage_calc;
    }
  }
  else {
    if (uVar8 <= uVar12) {
      uVar3 = uVar3 & 0xffc0;
      goto DMF_faded_tpage_calc;
    }
  }
  uVar3 = uVar11 & 0xffc0;
DMF_faded_tpage_calc:
  cVar1 = (char)uVar3;
  *(char *)(unaff_s0 + 0xd) = (char)uVar8 - cVar1;
  *(char *)(unaff_s0 + 0xf) = (char)uVar10 - cVar1;
  *(char *)(unaff_s0 + 0x11) = (char)uVar12 - cVar1;
  *(u_short *)((int)unaff_s0 + 0x3e) =
       (u_short)(uVar3 >> 6) | (u_short)*(u_char *)(unaff_s8 + 0x88);
  unaff_s0[10] = *(u_int *)(iVar4 + unaff_s1);
  *(undefined *)((int)unaff_s0 + 0x2b) = 7;
  *(u_int *)(iVar4 + unaff_s1) = (u_int)(unaff_s0 + 10) & 0xffffff;
  iVar4 = getCopReg(2,0xb000);
  unaff_s0[0xb] = 0x24808080 - iVar4;
  return;
}





void DRAW_MFace3_MAXZ0() 
{ 

		

	


		

	


		

	

	return null;
}




void DRAW_MFace3_MAXZ1() 
{ 

		

	


		

	

	return null;
}




void DRAW_MFace3_MT() 
{ 

		

	


		

	

	return null;
}




void DRAW_MFace3_OTZ() 
{ 

		

	


		

	

	return null;
}




void DRAW_MFace3_F3() 
{ 

		

	


		

	

	return null;
}




void DRAW_MFace3_F3_NCDPQ() 
{ 

		

	


		

	


		

	

	return null;
}




void DRAW_MFace3_F3_AddPrim() 
{ 

		

	


		

	

	return null;
}




void DRAW_MFace3_FT3() 
{ 

		

	


		

	


		

	


		

	


		

	


		

	

	return null;
}




void DRAW_MFace3_FT3_NCDPQ() 
{ 

		

	


		

	


		

	

	return null;
}




void DRAW_MFace3_FT3_AddPrim() 
{ 

		

	


		

	


		

	

	return null;
}




void DRAW_MFace3_Gouraud() 
{ 

		

	


		

	

	return null;
}




void DRAW_MFace3_G3() 
{ 

		

	


		

	


		

	


		

	


		

	

	return null;
}




void DRAW_MFace3_GT3() 
{ 

		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	

	return null;
}




void DRAW_MFace3_GT_nofade() 
{ 

		

	


		

	

	return null;
}




void DRAW_MFace3_Return() 
{ 

		

	


		

	

	return null;
}




void DRAW_MFace3_FadeBackpoly() 
{ 

		

	


		

	


		

	


		

	


		

	

	return null;
}




void DMF_faded_t2_smaller() 
{ 

		

	


		

	

	return null;
}




void DMF_faded_t3_min() 
{ 

		

	


		

	

	return null;
}




void DMF_faded_tpage_calc() 
{ 

		

	


		

	


		

	


		

	

	return null;
}




void DRAW_MFace3_fog_g3() 
{ 

		

	


		

	


		

	


		

	


		

	

	return null;
}




void DRAW_MFace3_fog_ft3() 
{ 

		

	


		

	


		

	


		

	


		

	

	return null;
}




void DRAW_MFace3_fog_gt3() 
{ 

		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	

	return null;
}




void DRAW_MFace3_fog_backface() 
{ 

		

	


		

	


		

	


		

	


		

	

	return null;
}





 

		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	


		

	

* WARNING: Instruction at (ram,0x800283d0) overlaps instruction at (ram,0x800283cc)



u_int DRAW_SplitModel_S(int param_1,u_char param_2,int param_3,u_char *param_4,int param_5)

{
  u_int uVar1;
  u_short *puVar2;
  
  puVar2 = *(u_short **)(param_1 + 0x14);
  DAT_1f800020 = puVar2 + *(int *)(param_1 + 0x10) * 6;
  DAT_1f800024 = *(u_int *)(param_5 + 8);
  DAT_1f800090 = 0;
  _DAT_1f80007c = depthQBackColor;
  _DAT_1f800080 = modelFadeValue;
  _DAT_1f800084 = modelFadeValue;
  if (modelFadeValue != 0) {
    _DAT_1f800084 = 2;
  }
  DAT_1f800088 = (gameTrackerX.gameData.asmData.dispPage ^ 1U) << 4 | 0x100;
  if (draw_belowSplit == 0) {
    _DAT_1f800000 = (undefined *)0x80028490;
  }
  else {
    _DAT_1f800000 = &DSM_Outcode0;
  }
  _DAT_1f800004 = &DSM_Outcode1;
  _DAT_1f800008 = &DSM_Outcode2;
  _DAT_1f80000c = &DSM_Outcode3;
  _DAT_1f800010 = &DSM_Outcode4;
  _DAT_1f800014 = &DSM_Outcode5;
  DAT_1f800018 = &DSM_Outcode6;
  DAT_1f80001c = &DSM_Outcode7;
  DAT_1f80002c._0_2_ = 0;
  DAT_1f800034 = 0;
  DAT_1f80003c._0_2_ = 0;
  setCopControlWord(2,0,*param_4);
  setCopControlWord(2,0x800,param_4[1]);
  setCopControlWord(2,0x1000,param_4[2]);
  setCopControlWord(2,0x1800,param_4[3]);
  setCopControlWord(2,0x2000,param_4[4]);
  setCopControlWord(2,0x2800,param_4[5]);
  setCopControlWord(2,0x3000,param_4[6]);
  setCopControlWord(2,0x3800,param_4[7]);
  while ((puVar2 < DAT_1f800020 && (*(u_int *)(param_5 + 4) < DAT_1f800024))) {
    if ((*(byte *)((int)puVar2 + 7) & 0x10) == 0) {
      DAT_1f80008c = 0;


      uVar1 = (**(code **)((((u_int)(0 < *(short *)(param_3 + (u_int)puVar2[2] * 8 + 4)) << 1 |
                            (u_int)(0 < *(short *)(param_3 + (u_int)puVar2[1] * 8 + 4))) << 1 |
                           (u_int)(0 < *(short *)(param_3 + (u_int)*puVar2 * 8 + 4))) * 4 + 0x1f800000
                          ))(&gNormalList,*(u_char *)(param_1 + 4));
      return uVar1;
    }
    puVar2 = puVar2 + 6;
  }
  _DAT_1f800004 = &DSM_Outcode1;
  _DAT_1f800008 = &DSM_Outcode2;
  _DAT_1f80000c = &DSM_Outcode3;
  _DAT_1f800010 = &DSM_Outcode4;
  _DAT_1f800014 = &DSM_Outcode5;
  DAT_1f800018 = &DSM_Outcode6;
  DAT_1f80001c = &DSM_Outcode7;
  DAT_1f80002c._0_2_ = 0;
  DAT_1f800034 = 0;
  DAT_1f80003c._0_2_ = 0;
  DAT_1f800090 = 0;
  return *(u_int *)(param_5 + 4);
}





void DSM_noFade() 
{ 

		

	

	return null;
}




void DSM_SetOutcode0() 
{ 

		

	

	return null;
}




void DSM_SetOutcode1() 
{ 

		

	

	return null;
}




void DSM_IncrementMFace() 
{ 

		

	


		

	

	return null;
}




void DSM_BeginLoop() 
{ 

		

	


		

	


		

	

	return null;
}




void DSM_Outcode0() 
{ 

		

	


		

	


		

	


		

	


		

	


		

	


		

	

	return null;
}




void DSM_Outcode7() 
{ 

		

	


		

	


		

	


		

	


		

	


		

	


		

	

	return null;
}




void DSM_Outcode7_LDV3() 
{ 

		

	


		

	


		

	


		

	

	return null;
}




void DSM_Outcode7_MG() 
{ 

		

	


		

	


		

	

	return null;
}




void DSM_Outcode7_G() 
{ 

		

	


		

	

	return null;
}




void DSM_Outcode7_Flat() 
{ 

		

	


		

	

	return null;
}




void DSM_Outcode7_Draw() 
{ 

		

	


		

	

	return null;
}




void DSM_Outcode1() 
{ 

		

	


		

	


		

	


		

	


		

	


		

	


		

	

	return null;
}




void DSM_Outcode1_MG() 
{ 

		

	


		

	


		

	

	return null;
}




void DSM_Outcode1_G() 
{ 

		

	


		

	

	return null;
}




void DSM_Outcode1_Flat() 
{ 

		

	


		

	

	return null;
}




void DSM_Outcode1_Draw() 
{ 

		

	


		

	

	return null;
}




void DSM_Outcode2() 
{ 

		

	


		

	


		

	


		

	


		

	


		

	


		

	

	return null;
}




void DSM_Outcode2_MG() 
{ 

		

	


		

	


		

	

	return null;
}




void DSM_Outcode2_G() 
{ 

		

	


		

	

	return null;
}




void DSM_Outcode2_Flat() 
{ 

		

	


		

	

	return null;
}




void DSM_Outcode2_Draw() 
{ 

		

	


		

	

	return null;
}




void DSM_Outcode4() 
{ 

		

	


		

	


		

	


		

	


		

	


		

	


		

	

	return null;
}




void DSM_Outcode4_MG() 
{ 

		

	


		

	


		

	

	return null;
}




void DSM_Outcode4_G() 
{ 

		

	


		

	

	return null;
}




void DSM_Outcode4_Flat() 
{ 

		

	


		

	

	return null;
}




void DSM_Outcode4_Draw() 
{ 

		

	


		

	

	return null;
}




void DSM_Outcode3() 
{ 

		

	


		

	


		

	


		

	


		

	


		

	


		

	

	return null;
}




void DSM_Outcode3_MG() 
{ 

		

	


		

	


		

	

	return null;
}




void DSM_Outcode3_G() 
{ 

		

	


		

	

	return null;
}




void DSM_Outcode3_Flat() 
{ 

		

	


		

	

	return null;
}




void DSM_Outcode3_Draw() 
{ 

		

	


		

	

	return null;
}




void DSM_Outcode5() 
{ 

		

	


		

	


		

	


		

	


		

	


		

	


		

	

	return null;
}




void DSM_Outcode5_MG() 
{ 

		

	


		

	


		

	

	return null;
}




void DSM_Outcode5_G() 
{ 

		

	


		

	

	return null;
}




void DSM_Outcode5_Flat() 
{ 

		

	


		

	

	return null;
}




void DSM_Outcode5_Draw() 
{ 

		

	


		

	

	return null;
}




void DSM_Outcode6() 
{ 

		

	


		

	


		

	


		

	


		

	


		

	


		

	

	return null;
}




void DSM_Outcode6_MG() 
{ 

		

	


		

	


		

	

	return null;
}




void DSM_Outcode6_G() 
{ 

		

	


		

	

	return null;
}




void DSM_Outcode6_Flat() 
{ 

		

	


		

	

	return null;
}




void DSM_Outcode6_Draw() 
{ 

		

	


		

	

	return null;
}




void DSM_CleanUp() 
{ 

		

	


		

	


		

	

	return null;
}




